{
	// Contrôle si l'éditeur affiche CodeLens.
	"diffEditor.codeLens": false,

	// Quand il est activé, l'éditeur de différences ignore les changements d'espace blanc de début ou de fin.
	"diffEditor.ignoreTrimWhitespace": true,

	// Délai d'expiration en millisecondes avant annulation du calcul de diff. Utilisez 0 pour supprimer le délai d'expiration.
	"diffEditor.maxComputationTime": 5000,

	// Contrôle si l'éditeur de différences affiche les indicateurs +/- pour les changements ajoutés/supprimés .
	"diffEditor.renderIndicators": true,

	// Contrôle si l'éditeur de différences affiche les différences en mode côte à côte ou inline.
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: Le retour automatique à la ligne n'est jamais effectué.
	//  - on: Le retour automatique à la ligne s'effectue en fonction de la largeur de la fenêtre d'affichage.
	//  - inherit: Le retour automatique à la ligne dépend du paramètre '#editor.wordWrap#'.
	"diffEditor.wordWrap": "inherit",

	// Contrôle si les suggestions doivent être acceptées sur les caractères de validation. Par exemple, en JavaScript, le point-virgule (`;`) peut être un caractère de validation qui accepte une suggestion et tape ce caractère.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Contrôle si les suggestions sont acceptées après appui sur 'Entrée', en plus de 'Tab'. Permet d’éviter toute ambiguïté entre l’insertion de nouvelles lignes et l'acceptation de suggestions.
	//  - on
	//  - smart: Accepter uniquement une suggestion avec 'Entrée' quand elle effectue une modification textuelle.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// Contrôle le nombre de lignes de l’éditeur qu’un lecteur d’écran peut lire en une seule fois. Quand nous détectons un lecteur d’écran, nous définissons automatiquement la valeur par défaut à 500. Attention : Les valeurs supérieures à la valeur par défaut peuvent avoir un impact important sur les performances.
	"editor.accessibilityPageSize": 10,

	// Contrôle si l'éditeur doit s'exécuter dans un mode optimisé pour les lecteurs d'écran. Si la valeur est on, le retour automatique à la ligne est désactivé.
	//  - auto: L'éditeur utilise les API de la plateforme pour détecter si un lecteur d'écran est attaché.
	//  - on: L'éditeur est optimisé en permanence pour les lecteurs d'écran. Le retour automatique à la ligne est désactivé.
	//  - off: L'éditeur n'est jamais optimisé pour une utilisation avec un lecteur d'écran.
	"editor.accessibilitySupport": "auto",

	// Contrôle si l’éditeur doit fermer automatiquement les parenthèses quand l’utilisateur ajoute une parenthèse ouvrante.
	//  - always
	//  - languageDefined: Utilisez les configurations de langage pour déterminer quand fermer automatiquement les parenthèses.
	//  - beforeWhitespace: Fermer automatiquement les parenthèses uniquement lorsque le curseur est à gauche de l’espace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Contrôle si l'éditeur doit supprimer les guillemets ou crochets fermants adjacents au moment de la suppression.
	//  - always
	//  - auto: Supprimez les guillemets ou crochets fermants adjacents uniquement s'ils ont été insérés automatiquement.
	//  - never
	"editor.autoClosingDelete": "auto",

	// Contrôle si l'éditeur doit taper avant les guillemets ou crochets fermants.
	//  - always
	//  - auto: Tapez avant les guillemets ou les crochets fermants uniquement s'ils sont automatiquement insérés.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// Contrôle si l’éditeur doit fermer automatiquement les guillemets après que l’utilisateur ajoute un guillemet ouvrant.
	//  - always
	//  - languageDefined: Utilisez les configurations de langage pour déterminer quand fermer automatiquement les guillemets.
	//  - beforeWhitespace: Fermer automatiquement les guillemets uniquement lorsque le curseur est à gauche de l’espace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Contrôle si l'éditeur doit ajuster automatiquement le retrait quand les utilisateurs tapent, collent, déplacent ou mettent en retrait des lignes.
	//  - none: L'éditeur n'insère pas de retrait automatiquement.
	//  - keep: L'éditeur conserve le retrait de la ligne actuelle.
	//  - brackets: L'éditeur conserve le retrait de la ligne actuelle et honore les crochets définis par le langage.
	//  - advanced: L'éditeur conserve le retrait de la ligne actuelle, honore les crochets définis par le langage et appelle des objets onEnterRules spéciaux définis par les langages.
	//  - full: L'éditeur conserve le retrait de la ligne actuelle, honore les crochets définis par le langage, appelle des objets onEnterRules spéciaux définis par les langages et honore les objets indentationRules définis par les langages.
	"editor.autoIndent": "full",

	// Contrôle si l'éditeur doit automatiquement entourer les sélections quand l'utilisateur tape des guillemets ou des crochets.
	//  - languageDefined: Utilisez les configurations de langue pour déterminer quand entourer automatiquement les sélections.
	//  - quotes: Entourez avec des guillemets et non des crochets.
	//  - brackets: Entourez avec des crochets et non des guillemets.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Types d'action de code à exécuter à l'enregistrement.
	"editor.codeActionsOnSave": {},

	// Contrôle si l'éditeur affiche CodeLens.
	"editor.codeLens": true,

	// Contrôle la famille de polices pour CodeLens.
	"editor.codeLensFontFamily": "",

	// Contrôle la taille de police en pixels pour CodeLens. Quand la valeur est '0', 90 % de '#editor.fontSize#' est utilisé.
	"editor.codeLensFontSize": 0,

	// Contrôle si l'éditeur doit afficher les éléments décoratifs de couleurs inline et le sélecteur de couleurs.
	"editor.colorDecorators": true,

	// Autoriser l'utilisation de la souris et des touches pour sélectionner des colonnes.
	"editor.columnSelection": false,

	// Contrôle si les lignes vides doivent être ignorées avec des actions d'activation/de désactivation, d'ajout ou de suppression des commentaires de ligne.
	"editor.comments.ignoreEmptyLines": true,

	// Contrôle si un espace est inséré pour les commentaires.
	"editor.comments.insertSpace": true,

	// Contrôle si la coloration syntaxique doit être copiée dans le presse-papiers.
	"editor.copyWithSyntaxHighlighting": true,

	// Contrôler le style d’animation du curseur.
	"editor.cursorBlinking": "blink",

	// Contrôle si l'animation du point d'insertion doit être activée.
	"editor.cursorSmoothCaretAnimation": false,

	// Contrôle le style du curseur.
	"editor.cursorStyle": "line",

	// Contrôle le nombre minimal de lignes de début et de fin visibles autour du curseur. Également appelé 'scrollOff' ou 'scrollOffset' dans d'autres éditeurs.
	"editor.cursorSurroundingLines": 0,

	// Contrôle quand 'cursorSurroundingLines' doit être appliqué.
	//  - default: 'cursorSurroundingLines' est appliqué seulement s'il est déclenché via le clavier ou une API.
	//  - all: 'cursorSurroundingLines' est toujours appliqué.
	"editor.cursorSurroundingLinesStyle": "default",

	// Détermine la largeur du curseur lorsque `editor.cursorStyle` est à `line`.
	"editor.cursorWidth": 0,

	// Définit un formateur par défaut qui est prioritaire sur tous les autres paramètres de formateur. Doit être l'identificateur d'une extension contribuant à un formateur.
	//  - null: Aucun(e)
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - vscode.css-language-features: Fournit une prise en charge riche de langage pour les fichiers CSS, LESS et SCSS
	//  - vscode.html-language-features: Fournit une prise en charge de langage complète pour les fichiers HTML et Handlebar
	//  - vscode.json-language-features: Fournit une prise en charge de langage pour les fichiers JSON
	//  - vscode.markdown-language-features: Fournit une prise en charge riche de langage pour Markdown
	//  - vscode.php-language-features: Fournit une prise en charge de langage riche pour les fichiers PHP.
	//  - ms-vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - vscode.search-result: Fournit la mise en surbrillance de la syntaxe et des fonctionnalités de langue pour les résultats de recherche avec onglets.
	//  - vscode.typescript-language-features: Fournit une prise en charge riche de langage pour JavaScript et TypeScript.
	//  - kube.42header: 42 header for VSCode : www.42.fr
	//  - MariusvanWijk-JoppeKoers.codam-norminette-3: 42 Norminette decorator for VSCode
	//  - vscode.configuration-editing: Fournit des fonctionnalités (IntelliSense avancé, correction automatique) dans les fichiers de configuration comme les fichiers de paramètres, de lancement et de recommandation d'extension.
	//  - vscode.debug-auto-launch: Assistance pour la fonctionnalité d'attachement automatique quand les extensions de débogage de nœud ne sont pas actives. 
	//  - vscode.debug-server-ready: Ouvrez l'URI dans le navigateur si le serveur en cours de débogage est prêt.
	//  - vscode.emmet: Prise en charge d'Emmet pour VS Code
	//  - vscode.extension-editing: Fournit des fonctions de linting pour la création d’extensions.
	//  - vscode.git: Intégration Git SCM
	//  - vscode.github: Fonctionnalités GitHub pour VS Code
	//  - vscode.github-authentication: Fournisseur d'authentification GitHub
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension qui ajoute des fonctionnalités Gulp à VS Code.
	//  - vscode.image-preview: Fournit l'aperçu d'image intégré de VS Code
	//  - vscode.ipynb: Fournit une prise en charge de base pour l’ouverture et la lecture des fichiers de bloc-notes .ipynb de Jupyter
	//  - vscode.jake: Extension pour ajouter des fonctionnalités Jake à VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - vscode.markdown-math: Ajoute la prise en charge mathématique à Markdown dans les blocs-notes.
	//  - vscode.merge-conflict: Mise en surbrillance et commandes pour les conflits de fusion inline.
	//  - vscode.microsoft-authentication: Fournisseur d'authentification Microsoft
	//  - ms-vscode.node-debug: Prise en charge du débogage Node.js (versions < 8.0)
	//  - ms-vscode.node-debug2: Prise en charge du débogage de Node.js
	//  - vscode.npm: Extension pour ajouter une prise en charge des tâches pour les scripts npm.
	//  - vscode.simple-browser: Vue web intégrée très élémentaire pour l'affichage du contenu web.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	"editor.defaultFormatter": null,

	// Contrôle si le geste de souris Accéder à la définition ouvre toujours le widget d'aperçu.
	"editor.definitionLinkOpensInPeek": false,

	// Contrôle si '#editor.tabSize#' et '#editor.insertSpaces#' sont automatiquement détectés lors de l’ouverture d’un fichier en fonction de son contenu.
	"editor.detectIndentation": true,

	// Contrôle si l’éditeur autorise le déplacement de sélections par glisser-déplacer.
	"editor.dragAndDrop": true,

	// Contrôle si la copie sans sélection permet de copier la ligne actuelle.
	"editor.emptySelectionClipboard": true,

	// Multiplicateur de vitesse de défilement quand vous appuyez sur 'Alt'.
	"editor.fastScrollSensitivity": 5,

	// Contrôle si le widget Recherche doit ajouter des lignes supplémentaires en haut de l'éditeur. Quand la valeur est true, vous pouvez faire défiler au-delà de la première ligne si le widget Recherche est visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Contrôle la condition d'activation automatique de la recherche dans la sélection.
	//  - never: Ne jamais activer automatiquement la recherche dans la sélection (par défaut).
	//  - always: Toujours activer automatiquement la recherche dans la sélection.
	//  - multiline: Activez Rechercher automatiquement dans la sélection quand plusieurs lignes de contenu sont sélectionnées.
	"editor.find.autoFindInSelection": "never",

	// Contrôle si le curseur doit sauter pour rechercher les correspondances lors de la saisie.
	"editor.find.cursorMoveOnType": true,

	// Détermine si le Widget Recherche devrait lire ou modifier le presse-papiers de recherche partagé sur macOS.
	"editor.find.globalFindClipboard": false,

	// Contrôle si la recherche redémarre automatiquement depuis le début (ou la fin) quand il n'existe aucune autre correspondance.
	"editor.find.loop": true,

	// Détermine si la chaîne de recherche dans le Widget Recherche est initialisée avec la sélection de l’éditeur.
	//  - never: Ne lancez jamais la chaîne de recherche dans la sélection de l’éditeur.
	//  - always: Toujours amorcer la chaîne de recherche à partir de la sélection de l’éditeur, y compris le mot à la position du curseur.
	//  - selection: Chaîne de recherche initiale uniquement dans la sélection de l’éditeur.
	"editor.find.seedSearchStringFromSelection": "always",

	// Contrôle si l'éditeur a le pliage de code activé.
	"editor.folding": true,

	// Contrôle si l'éditeur doit mettre en évidence les plages pliées.
	"editor.foldingHighlight": true,

	// Contrôle si l’éditeur réduit automatiquement les plages d’importation.
	"editor.foldingImportsByDefault": false,

	// Contrôle la stratégie de calcul des plages de pliage.
	//  - auto: Utilisez une stratégie de pliage propre à la langue, si disponible, sinon utilisez la stratégie basée sur le retrait.
	//  - indentation: Utilisez la stratégie de pliage basée sur le retrait.
	"editor.foldingStrategy": "auto",

	// Contrôle la famille de polices.
	"editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

	// Configure les ligatures de police ou les fonctionnalités de police. Il peut s'agir d'une valeur booléenne permettant d'activer/de désactiver les ligatures, ou d'une chaîne correspondant à la valeur de la propriété CSS 'font-feature-settings'.
	"editor.fontLigatures": false,

	// Contrôle la taille de police en pixels.
	"editor.fontSize": 12,

	// Contrôle l'épaisseur de police. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"editor.fontWeight": "normal",

	// Détermine si l’éditeur doit automatiquement mettre en forme le contenu collé. Un formateur doit être disponible et être capable de mettre en forme une plage dans un document.
	"editor.formatOnPaste": false,

	// Met en forme un fichier à l'enregistrement. Un formateur doit être disponible, le fichier ne doit pas être enregistré après un délai et l'éditeur ne doit pas être en cours d'arrêt.
	"editor.formatOnSave": false,

	// Permet de contrôler si la mise en forme au moment de l'enregistrement met en forme la totalité du fichier ou seulement les modifications apportées. S'applique uniquement quand '#editor.formatOnSave#' est activé.
	//  - file: Met en forme la totalité du fichier.
	//  - modifications: Met en forme les modifications (nécessite le contrôle de code source).
	//  - modificationsIfAvailable: Tente de mettre en forme les modifications uniquement (nécessite le contrôle de code source). Si le contrôle de code source ne peut pas être utilisé, le fichier entier est mis en forme.
	"editor.formatOnSaveMode": "file",

	// Contrôle si l’éditeur doit mettre automatiquement en forme la ligne après la saisie.
	"editor.formatOnType": false,

	// Contrôle si l'éditeur doit afficher la marge de glyphes verticale. La marge de glyphes sert principalement au débogage.
	"editor.glyphMargin": true,

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la déclaration' est l'emplacement actuel.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la définition' est l'emplacement actuel.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre l'implémentation' est l'emplacement actuel.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la référence' est l'emplacement actuel.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la définition de type' est l'emplacement actuel.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// Ce paramètre est déprécié, utilisez des paramètres distincts comme 'editor.editor.gotoLocation.multipleDefinitions' ou 'editor.editor.gotoLocation.multipleImplementations' à la place.
	// 
	"editor.gotoLocation.multiple": null,

	// Contrôle le comportement de la commande 'Atteindre la déclaration' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleDeclarations": "peek",

	// Contrôle le comportement de la commande 'Atteindre la définition' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleDefinitions": "peek",

	// Contrôle le comportement de la commande 'Atteindre les implémentations' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleImplementations": "peek",

	// Contrôle le comportement de la commande 'Atteindre les références' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleReferences": "peek",

	// Contrôle le comportement de la commande 'Atteindre la définition de type' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// Contrôle si le curseur doit être masqué dans la règle de la vue d’ensemble.
	"editor.hideCursorInOverviewRuler": false,

	// Contrôle si l’éditeur doit mettre en surbrillance le guide de mise en retrait actif.
	"editor.highlightActiveIndentGuide": true,

	// Contrôle le délai en millisecondes, après lequel le survol est affiché.
	"editor.hover.delay": 300,

	// Contrôle si le pointage est affiché.
	"editor.hover.enabled": true,

	// Contrôle si le pointage doit rester visible quand la souris est déplacée au-dessus.
	"editor.hover.sticky": true,

	// Active les indicateurs inlay dans l’éditeur.
	"editor.inlayHints.enabled": true,

	// Contrôle la famille de polices des indicateurs d’inlay dans l’éditeur. Lorsqu’il est défini sur vide, '#editor.fontFamily#' est utilisé.
	"editor.inlayHints.fontFamily": "",

	// Contrôle la taille de police des indicateurs inlay dans l’éditeur. Quand la valeur est définie sur `0`, 90 % de `editor.fontSize` est utilisé.
	"editor.inlayHints.fontSize": 0,

	// Contrôle si les suggestions en ligne doivent être affichées automatiquement dans l’éditeur.
	"editor.inlineSuggest.enabled": false,

	// Contrôle le mode à utiliser pour le rendu des suggestions incluses.
	//  - prefix: Affichez uniquement une suggestion inlined si le texte de remplacement est un préfixe du texte d’insertion.
	//  - subword: Affichez uniquement une suggestion inlined si le texte de remplacement est un sous-mot du texte d’insertion.
	//  - subwordSmart: Affichez uniquement une suggestion inlined si le texte de remplacement est un sous-mot du texte d’insertion, mais que le sous-mot doit commencer après le curseur.
	"editor.inlineSuggest.mode": "subwordSmart",

	// Espaces insérés quand vous appuyez sur la touche Tab. Ce paramètre est remplacé en fonction du contenu du fichier quand '#editor.detectIndentation#' est activé.
	"editor.insertSpaces": true,

	// Traitement spécial des fichiers volumineux pour désactiver certaines fonctionnalités utilisant beaucoup de mémoire.
	"editor.largeFileOptimizations": true,

	// Contrôle l'espacement des lettres en pixels.
	"editor.letterSpacing": 0,

	// Active l’ampoule d’action de code dans l’éditeur.
	"editor.lightbulb.enabled": true,

	// Contrôle la hauteur de ligne. 
	//  - Utilisez 0 pour calculer automatiquement la hauteur de ligne à partir de la taille de police.
	//  : les valeurs comprises entre 0 et 8 sont utilisées comme multiplicateur avec la taille de police.
	//  : les valeurs supérieures ou égales à 8 seront utilisées comme valeurs effectives.
	"editor.lineHeight": 0,

	// Contrôle l'affichage des numéros de ligne.
	//  - off: Les numéros de ligne ne sont pas affichés.
	//  - on: Les numéros de ligne sont affichés en nombre absolu.
	//  - relative: Les numéros de ligne sont affichés sous la forme de distance en lignes à la position du curseur.
	//  - interval: Les numéros de ligne sont affichés toutes les 10 lignes.
	"editor.lineNumbers": "on",

	// Contrôle si la modification liée est activée dans l'éditeur. En fonction du langage, les symboles associés, par exemple les balises HTML, sont mis à jour durant le processus de modification.
	"editor.linkedEditing": false,

	// Contrôle si l’éditeur doit détecter les liens et les rendre cliquables.
	"editor.links": true,

	// Mettez en surbrillance les crochets correspondants.
	"editor.matchBrackets": "always",

	// Les lignes plus longues que cette valeur ne sont pas tokenisées pour des raisons de performances
	"editor.maxTokenizationLineLength": 20000,

	// Contrôle si la minimap est affichée.
	"editor.minimap.enabled": true,

	// Limiter la largeur de la minimap pour afficher au plus un certain nombre de colonnes.
	"editor.minimap.maxColumn": 120,

	// Afficher les caractères réels sur une ligne par opposition aux blocs de couleur.
	"editor.minimap.renderCharacters": true,

	// Échelle du contenu dessiné dans le minimap : 1, 2 ou 3.
	"editor.minimap.scale": 1,

	// Contrôle quand afficher le curseur du minimap.
	"editor.minimap.showSlider": "mouseover",

	// Contrôle le côté où afficher la minimap.
	"editor.minimap.side": "right",

	// Contrôle la taille du minimap.
	//  - proportional: Le minimap a la même taille que le contenu de l'éditeur (défilement possible).
	//  - fill: Le minimap s'agrandit ou se réduit selon les besoins pour remplir la hauteur de l'éditeur (pas de défilement).
	//  - fit: Le minimap est réduit si nécessaire pour ne jamais dépasser la taille de l'éditeur (pas de défilement).
	"editor.minimap.size": "proportional",

	// Un multiplicateur à utiliser sur les `deltaX` et `deltaY` des événements de défilement de roulette de souris.
	"editor.mouseWheelScrollSensitivity": 1,

	// Faire un zoom sur la police de l'éditeur quand l'utilisateur fait tourner la roulette de la souris tout en maintenant la touche 'Ctrl' enfoncée.
	"editor.mouseWheelZoom": false,

	// Fusionnez plusieurs curseurs quand ils se chevauchent.
	"editor.multiCursorMergeOverlapping": true,

	// Le modificateur à utiliser pour ajouter plusieurs curseurs avec la souris. Les gestes de souris Atteindre la définition et Ouvrir le lien s'adapteront tels qu’ils n’entrent pas en conflit avec le modificateur multicursor. [Lire la suite] (https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Mappe vers 'Contrôle' dans Windows et Linux, et vers 'Commande' dans macOS.
	//  - alt: Mappe vers 'Alt' dans Windows et Linux, et vers 'Option' dans macOS.
	"editor.multiCursorModifier": "alt",

	// Contrôle le collage quand le nombre de lignes du texte collé correspond au nombre de curseurs.
	//  - spread: Chaque curseur colle une seule ligne de texte.
	//  - full: Chaque curseur colle le texte en entier.
	"editor.multiCursorPaste": "spread",

	// Contrôle si l'éditeur doit mettre en surbrillance les occurrences de symboles sémantiques.
	"editor.occurrencesHighlight": true,

	// Contrôle si une bordure doit être dessinée autour de la règle de la vue d'ensemble.
	"editor.overviewRulerBorder": true,

	// Contrôle la quantité d'espace entre le bord inférieur de l'éditeur et la dernière ligne.
	"editor.padding.bottom": 0,

	// Contrôle la quantité d’espace entre le bord supérieur de l’éditeur et la première ligne.
	"editor.padding.top": 0,

	// Détermine si le menu de suggestions de paramètres se ferme ou reviens au début lorsque la fin de la liste est atteinte.
	"editor.parameterHints.cycle": false,

	// Active une fenêtre contextuelle qui affiche de la documentation sur les paramètres et des informations sur les types à mesure que vous tapez.
	"editor.parameterHints.enabled": true,

	// Contrôle s'il faut mettre le focus sur l'éditeur inline ou sur l'arborescence dans le widget d'aperçu.
	//  - tree: Focus sur l'arborescence à l'ouverture de l'aperçu
	//  - editor: Placer le focus sur l'éditeur à l'ouverture de l'aperçu
	"editor.peekWidgetDefaultFocus": "tree",

	// Contrôle si les suggestions doivent apparaître automatiquement pendant la saisie.
	"editor.quickSuggestions": {
		"other": true,
		"comments": false,
		"strings": false
	},

	// Contrôle le délai en millisecondes après lequel des suggestions rapides sont affichées.
	"editor.quickSuggestionsDelay": 10,

	// Activer/désactiver la possibilité d'afficher un aperçu des changements avant le renommage
	"editor.rename.enablePreview": true,

	// Déprécié. Utilisez 'editor.linkedEditing' à la place.
	// Contrôle si l'éditeur renomme automatiquement selon le type.
	"editor.renameOnType": false,

	// Contrôle si l’éditeur doit afficher les caractères de contrôle.
	"editor.renderControlCharacters": false,

	// Affichez le dernier numéro de ligne quand le fichier se termine par un saut de ligne.
	"editor.renderFinalNewline": true,

	// Contrôle si l’éditeur doit afficher les guides de mise en retrait.
	"editor.renderIndentGuides": true,

	// Contrôle la façon dont l’éditeur doit afficher la mise en surbrillance de la ligne actuelle.
	//  - none
	//  - gutter
	//  - line
	//  - all: Met en surbrillance la gouttière et la ligne actuelle.
	"editor.renderLineHighlight": "line",

	// Contrôle si l'éditeur doit afficher la mise en surbrillance de la ligne actuelle uniquement quand il a le focus.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// Contrôle la façon dont l’éditeur doit restituer les caractères espaces.
	//  - none
	//  - boundary: Affiche les espaces blancs à l'exception des espaces uniques entre les mots.
	//  - selection: Afficher les espaces blancs uniquement sur le texte sélectionné.
	//  - trailing: Affiche uniquement les caractères correspondant aux espaces blancs de fin.
	//  - all
	"editor.renderWhitespace": "selection",

	// Contrôle si les sélections doivent avoir des angles arrondis.
	"editor.roundedSelection": true,

	// Rendre les règles verticales après un certain nombre de caractères à espacement fixe. Utiliser plusieurs valeurs pour plusieurs règles. Aucune règle n'est dessinée si le tableau est vide.
	"editor.rulers": [],

	// Contrôle la visibilité de la barre de défilement horizontale.
	//  - auto: La barre de défilement horizontale sera visible uniquement lorsque cela est nécessaire.
	//  - visible: La barre de défilement horizontale est toujours visible.
	//  - hidden: La barre de défilement horizontale est toujours masquée.
	"editor.scrollbar.horizontal": "auto",

	// Hauteur de la barre de défilement horizontale.
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// Contrôle si les clics permettent de faire défiler par page ou d’accéder à la position de clic.
	"editor.scrollbar.scrollByPage": false,

	// Contrôle la visibilité de la barre de défilement verticale.
	//  - auto: La barre de défilement verticale sera visible uniquement lorsque cela est nécessaire.
	//  - visible: La barre de défilement verticale est toujours visible.
	//  - hidden: La barre de défilement verticale est toujours masquée.
	"editor.scrollbar.vertical": "auto",

	// Largeur de la barre de défilement verticale.
	"editor.scrollbar.verticalScrollbarSize": 14,

	// Contrôle le nombre de caractères supplémentaires, au-delà duquel l’éditeur défile horizontalement.
	"editor.scrollBeyondLastColumn": 5,

	// Contrôle si l’éditeur défile au-delà de la dernière ligne.
	"editor.scrollBeyondLastLine": true,

	// Faites défiler uniquement le long de l'axe prédominant quand le défilement est à la fois vertical et horizontal. Empêche la dérive horizontale en cas de défilement vertical sur un pavé tactile.
	"editor.scrollPredominantAxis": true,

	// Contrôle si l'éditeur doit mettre en surbrillance les correspondances similaires à la sélection.
	"editor.selectionHighlight": true,

	// Contrôle si semanticHighlighting est affiché pour les langages qui le prennent en charge.
	//  - true: Coloration sémantique activée pour tous les thèmes de couleur.
	//  - false: Coloration sémantique désactivée pour tous les thèmes de couleur.
	//  - configuredByTheme: La coloration sémantique est configurée par le paramètre 'semanticHighlighting' du thème de couleur actuel.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// Substitue la couleur et les styles des jetons sémantiques de l'éditeur à partir du thème de couleur sélectionné.
	"editor.semanticTokenColorCustomizations": {},

	// Contrôle les variables dépréciées barrées.
	"editor.showDeprecated": true,

	// Contrôle quand afficher les contrôles de pliage sur la reliure.
	//  - always: Affichez toujours les contrôles de pliage.
	//  - mouseover: Affichez uniquement les contrôles de pliage quand la souris est au-dessus de la reliure.
	"editor.showFoldingControls": "mouseover",

	// Contrôle la disparition du code inutile.
	"editor.showUnused": true,

	// Indique si les espaces blancs de début et de fin doivent toujours être sélectionnés.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// Contrôle si l'éditeur défile en utilisant une animation.
	"editor.smoothScrolling": false,

	// Contrôle si les extraits de code s'affichent en même temps que d'autres suggestions, ainsi que leur mode de tri.
	//  - top: Afficher des suggestions d’extraits au-dessus d’autres suggestions.
	//  - bottom: Afficher des suggestions d’extraits en-dessous d’autres suggestions.
	//  - inline: Afficher des suggestions d’extraits avec d’autres suggestions.
	//  - none: Ne pas afficher de suggestions d’extrait de code.
	"editor.snippetSuggestions": "inline",

	// Garder les éditeurs d'aperçu ouverts même si l'utilisateur double-clique sur son contenu ou appuie sur la touche Échap. 
	"editor.stablePeek": false,

	// Émule le comportement des tabulations pour la sélection quand des espaces sont utilisés à des fins de mise en retrait. La sélection respecte les taquets de tabulation.
	"editor.stickyTabStops": false,

	// Ce paramètre est déprécié, veuillez utiliser des paramètres distincts comme 'editor.suggest.showKeywords' ou 'editor.suggest.showSnippets' à la place.
	// 
	"editor.suggest.filteredTypes": {},

	// Détermine si le filtre et le tri des suggestions doivent prendre en compte les fautes de frappes mineures.
	"editor.suggest.filterGraceful": true,

	// Contrôle si les mots sont remplacés en cas d'acceptation de la saisie semi-automatique. Notez que cela dépend des extensions adhérant à cette fonctionnalité.
	//  - insert: Insérez une suggestion sans remplacer le texte à droite du curseur.
	//  - replace: Insérez une suggestion et remplacez le texte à droite du curseur.
	"editor.suggest.insertMode": "insert",

	// Contrôle si le tri favorise les mots qui apparaissent à proximité du curseur.
	"editor.suggest.localityBonus": false,

	// Ce paramètre est déprécié. Le widget de suggestion peut désormais être redimensionné.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// Contrôle si la sortie de la suggestion doit être affichée en aperçu dans l’éditeur.
	"editor.suggest.preview": false,

	// Contrôle le mode à utiliser pour le rendu de l’aperçu de suggestion.
	//  - prefix: Affichez un aperçu uniquement si le texte de remplacement est un préfixe du texte d’insertion.
	//  - subword: Affichez un aperçu uniquement si le texte de remplacement est un sous-mot du texte d’insertion.
	//  - subwordSmart: Afficher un aperçu si le texte de remplacement est un sous-mot du texte d’insertion ou s’il s’agit d’un préfixe du texte d’insertion.
	"editor.suggest.previewMode": "subwordSmart",

	// Contrôle si les sélections de suggestion mémorisées sont partagées entre plusieurs espaces de travail et fenêtres (nécessite '#editor.suggestSelection#').
	"editor.suggest.shareSuggestSelections": false,

	// Si activé, IntelliSense montre des suggestions de type 'class'.
	"editor.suggest.showClasses": true,

	// Si activé, IntelliSense montre des suggestions de type 'color'.
	"editor.suggest.showColors": true,

	// Si activé, IntelliSense montre des suggestions de type 'constant'.
	"editor.suggest.showConstants": true,

	// Si activé, IntelliSense montre des suggestions de type 'constructor'.
	"editor.suggest.showConstructors": true,

	// Si activé, IntelliSense montre des suggestions de type 'customcolor'.
	"editor.suggest.showCustomcolors": true,

	// Si cette option est activée, IntelliSense montre des suggestions `dépréciées`.
	"editor.suggest.showDeprecated": true,

	// Si activé, IntelliSense montre des suggestions de type 'enumMember'.
	"editor.suggest.showEnumMembers": true,

	// Si activé, IntelliSense montre des suggestions de type 'enum'.
	"editor.suggest.showEnums": true,

	// Si activé, IntelliSense montre des suggestions de type 'event'.
	"editor.suggest.showEvents": true,

	// Si activé, IntelliSense montre des suggestions de type 'field'.
	"editor.suggest.showFields": true,

	// Si activé, IntelliSense montre des suggestions de type 'file'.
	"editor.suggest.showFiles": true,

	// Si activé, IntelliSense montre des suggestions de type 'folder'.
	"editor.suggest.showFolders": true,

	// Si activé, IntelliSense montre des suggestions de type 'function'.
	"editor.suggest.showFunctions": true,

	// Contrôle s'il faut montrer ou masquer les icônes dans les suggestions.
	"editor.suggest.showIcons": true,

	// Détermine si les détails du widget de suggestion sont inclus dans l'étiquette ou uniquement dans le widget de détails
	"editor.suggest.showInlineDetails": true,

	// Si activé, IntelliSense montre des suggestions de type 'interface'.
	"editor.suggest.showInterfaces": true,

	// Si activé, IntelliSense montre des suggestions de type 'problèmes'.
	"editor.suggest.showIssues": true,

	// Si activé, IntelliSense montre des suggestions de type 'keyword'.
	"editor.suggest.showKeywords": true,

	// Si activé, IntelliSense montre des suggestions de type 'method'.
	"editor.suggest.showMethods": true,

	// Si activé, IntelliSense montre des suggestions de type 'module'.
	"editor.suggest.showModules": true,

	// Si activé, IntelliSense montre des suggestions de type 'operator'.
	"editor.suggest.showOperators": true,

	// Si activé, IntelliSense montre des suggestions de type 'property'.
	"editor.suggest.showProperties": true,

	// Si activé, IntelliSense montre des suggestions de type 'reference'.
	"editor.suggest.showReferences": true,

	// Si activé, IntelliSense montre des suggestions de type 'snippet'.
	"editor.suggest.showSnippets": true,

	// Contrôle la visibilité de la barre d'état en bas du widget de suggestion.
	"editor.suggest.showStatusBar": false,

	// Si activé, IntelliSense montre des suggestions de type 'struct'.
	"editor.suggest.showStructs": true,

	// Si activé, IntelliSense montre des suggestions de type 'typeParameter'.
	"editor.suggest.showTypeParameters": true,

	// Si activé, IntelliSense montre des suggestions de type 'unit'.
	"editor.suggest.showUnits": true,

	// Si activé, IntelliSense montre des suggestions de type 'utilisateur'.
	"editor.suggest.showUsers": true,

	// Si activé, IntelliSense montre des suggestions de type 'value'.
	"editor.suggest.showValues": true,

	// Si activé, IntelliSense montre des suggestions de type 'variable'.
	"editor.suggest.showVariables": true,

	// Si activé, IntelliSense montre des suggestions de type 'text'.
	"editor.suggest.showWords": true,

	// Contrôle si un extrait de code actif empêche les suggestions rapides.
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// Taille de la police pour le widget de suggestion. Lorsque la valeur est à `0`, la valeur de `#editor.fontSize` est utilisée.
	"editor.suggestFontSize": 0,

	// Hauteur de ligne du widget de suggestion. Quand la valeur est '0', la valeur de '#editor.lineHeight#' est utilisée. La valeur minimale est 8.
	"editor.suggestLineHeight": 0,

	// Contrôle si les suggestions devraient automatiquement s’afficher lorsque vous tapez les caractères de déclencheur.
	"editor.suggestOnTriggerCharacters": true,

	// Contrôle comment les suggestions sont pré-sélectionnés lors de l’affichage de la liste de suggestion.
	//  - first: Sélectionnez toujours la première suggestion.
	//  - recentlyUsed: Sélectionnez les suggestions récentes sauf si une entrée ultérieure en a sélectionné une, par ex., 'console.| -> console.log', car 'log' a été effectué récemment.
	//  - recentlyUsedByPrefix: Sélectionnez des suggestions en fonction des préfixes précédents qui ont complété ces suggestions, par ex., 'co -> console' et 'con -> const'.
	"editor.suggestSelection": "recentlyUsed",

	// Active les complétions par tabulation
	//  - on: La complétion par tabulation insérera la meilleure suggestion lorsque vous appuyez sur tab.
	//  - off: Désactiver les complétions par tabulation.
	//  - onlySnippets: Compléter les extraits de code par tabulation lorsque leur préfixe correspond. Fonctionne mieux quand les 'quickSuggestions' ne sont pas activées.
	"editor.tabCompletion": "off",

	// Le nombre d'espaces auxquels une tabulation est égale. Ce paramètre est substitué basé sur le contenu du fichier lorsque `editor.detectIndentation` est à 'on'.
	"editor.tabSize": 4,

	// Substitue les couleurs de syntaxe et le style de police de l'éditeur à partir du thème de couleur sélectionné.
	"editor.tokenColorCustomizations": {},

	// Supprimer l'espace blanc de fin inséré automatiquement.
	"editor.trimAutoWhitespace": true,

	// Contrôle si le fait de cliquer sur le contenu vide après une ligne pliée déplie la ligne.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// Supprimez les marques de fin de ligne inhabituelles susceptibles de causer des problèmes.
	//  - auto: Les marques de fin de ligne inhabituelles sont automatiquement supprimées.
	//  - off: Les marques de fin de ligne inhabituelles sont ignorées.
	//  - prompt: Les marques de fin de ligne inhabituelles demandent à être supprimées.
	"editor.unusualLineTerminators": "prompt",

	// L'insertion et la suppression des espaces blancs suit les taquets de tabulation.
	"editor.useTabStops": true,

	// Contrôle si la saisie semi-automatique doit être calculée en fonction des mots présents dans le document.
	"editor.wordBasedSuggestions": true,

	// Contrôle la façon dont sont calculées les complétions basées sur des mots dans les documents.
	//  - currentDocument: Suggère uniquement des mots dans le document actif.
	//  - matchingDocuments: Suggère des mots dans tous les documents ouverts du même langage.
	//  - allDocuments: Suggère des mots dans tous les documents ouverts.
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// Caractères utilisés comme séparateurs de mots durant la navigation ou les opérations basées sur les mots
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Contrôle comment les lignes doivent être limitées.
	//  - off: Le retour automatique à la ligne n'est jamais effectué.
	//  - on: Le retour automatique à la ligne s'effectue en fonction de la largeur de la fenêtre d'affichage.
	//  - wordWrapColumn: Les lignes seront terminées à `editor.wordWrapColumn`.
	//  - bounded: Les lignes seront terminées au minimum du viewport et `editor.wordWrapColumn`.
	"editor.wordWrap": "off",

	// Contrôle la colonne de terminaison de l’éditeur lorsque `editor.wordWrap` est à `wordWrapColumn` ou `bounded`.
	"editor.wordWrapColumn": 80,

	// Contrôle la mise en retrait des lignes justifiées.
	//  - none: Aucune mise en retrait. Les lignes enveloppées commencent à la colonne 1.
	//  - same: Les lignes enveloppées obtiennent la même mise en retrait que le parent.
	//  - indent: Les lignes justifiées obtiennent une mise en retrait +1 vers le parent.
	//  - deepIndent: Les lignes justifiées obtiennent une mise en retrait +2 vers le parent. 
	"editor.wrappingIndent": "same",

	// Contrôle l'algorithme qui calcule les points de wrapping.
	//  - simple: Suppose que tous les caractères ont la même largeur. Il s'agit d'un algorithme rapide qui fonctionne correctement pour les polices à espacement fixe et certains scripts (comme les caractères latins) où les glyphes ont la même largeur.
	//  - advanced: Délègue le calcul des points de wrapping au navigateur. Il s'agit d'un algorithme lent qui peut provoquer le gel des grands fichiers, mais qui fonctionne correctement dans tous les cas.
	"editor.wrappingStrategy": "simple",

	// Contrôle si les actions inline sont toujours visibles dans la vue Contrôle de code source.
	"scm.alwaysShowActions": false,

	// Contrôle si les dépôts doivent toujours être visibles dans la vue SCM.
	"scm.alwaysShowRepositories": false,

	// Contrôle si la vue SCM doit automatiquement révéler et sélectionner les fichiers lors de leur ouverture.
	"scm.autoReveal": true,

	// Contrôle le badge de comptage sur l'icône Contrôle de code source de la barre d'activités.
	//  - all: Affichez la somme de tous les badges de comptage de fournisseurs de contrôle de code source.
	//  - focused: Affichez le badge de compte du fournisseur de commande de source ciblé.
	//  - off: Désactivez le badge de compte Commande de source.
	"scm.countBadge": "all",

	// Contrôle le mode d'affichage du dépôt de contrôle de code source par défaut.
	//  - tree: Affichez les changements de dépôt dans une arborescence.
	//  - list: Affichez les changements du dépôt dans une liste.
	"scm.defaultViewMode": "list",

	// Contrôle les décorations diff dans l'éditeur
	//  - all: Affichez les décorations de différence dans tous les emplacements disponibles.
	//  - gutter: Affichez les décorations de différence seulement dans la marge de l'éditeur.
	//  - overview: Affichez les décorations de différence seulement dans la règle d'aperçu.
	//  - minimap: Affichez les décorations de différence seulement dans le minimap.
	//  - none: N'affichez pas les décorations de différence.
	"scm.diffDecorations": "all",

	// Contrôle le comportement des décorations de la gouttière des différences du contrôle de code source.
	//  - diff: Affiche l'aperçu des différences de manière incluse en cas de clic.
	//  - none: Ne fait rien.
	"scm.diffDecorationsGutterAction": "diff",

	// Contrôle la visibilité du décorateur de diff du contrôle de code source dans la reliure.
	//  - always: Affichez tout le temps le décorateur de diff dans la reliure.
	//  - hover: Montrez le décorateur de diff dans la reliure seulement au pointage.
	"scm.diffDecorationsGutterVisibility": "always",

	// Contrôle la largeur (px) des décorations de différenciation dans la marge (ajouts et modifications).
	"scm.diffDecorationsGutterWidth": 3,

	// Contrôle la police du message d'entrée. Utilisez 'default' pour la famille de polices de l'interface utilisateur du plan de travail, 'editor' pour la valeur de '#editor.fontFamily#' ou une famille de polices personnalisée.
	"scm.inputFontFamily": "default",

	// Contrôle la taille de police du message d'entrée en pixels.
	"scm.inputFontSize": 13,

	// Contrôle les badges de comptage sur les en-têtes de fournisseur de contrôle de code source. Ces en-têtes apparaissent uniquement quand il y a plusieurs fournisseurs.
	//  - hidden: Masquez les badges de comptage de fournisseurs de contrôle de code source.
	//  - auto: Affichez uniquement le badge de comptage de fournisseurs de contrôle de code source lorsque la valeur est différente de zéro.
	//  - visible: Affichez les badges de comptage de fournisseurs de contrôle de code source.
	"scm.providerCountBadge": "hidden",

	// Contrôle le nombre de dépôts visibles dans la section Dépôts de contrôle de code source. Définissez la valeur '0' pour redimensionner manuellement la vue.
	"scm.repositories.visible": 10,

	// Contrôle le comportement d'un clic sur une icône de la barre d'activités dans le workbench.
	//  - toggle: Masquer la barre latérale si l'élément sur lequel l'utilisateur a cliqué est déjà visible.
	//  - focus: Mettre le focus sur la barre latérale si l'élément sur lequel l'utilisateur a cliqué est déjà visible.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// Contrôle la visibilité de la barre d'activités dans le banc d'essai.
	"workbench.activityBar.visible": true,

	// Remplace les couleurs du thème de couleur sélectionné.
	"workbench.colorCustomizations": {},

	// Spécifie le thème de couleur utilisé dans le banc d'essai.
	"workbench.colorTheme": "Default Dark+",

	// Contrôle le nombre de commandes récemment utilisées à retenir dans l’historique de la palette de commande. Spécifier la valeur 0 pour désactiver l’historique des commandes.
	"workbench.commandPalette.history": 50,

	// Contrôle si la dernière saisie tapée dans la palette de commande devrait être restaurée lors de l’ouverture la prochaine fois.
	"workbench.commandPalette.preserveInput": false,

	// Détermine si la disposition centrée doit être redimensionnée automatiquement sur la largeur maximale quand plusieurs groupes sont ouverts. Quand il ne reste plus qu'un groupe ouvert, il est redimensionné sur la largeur centrée d'origine.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Contrôle le comportement des groupes d'éditeurs vides quand le dernier onglet du groupe est fermé. Quand ce paramètre est activé, les groupes vides se ferment automatiquement. Quand le paramètre est désactivé, les groupes vides restent dans la grille.
	"workbench.editor.closeEmptyGroups": true,

	// Contrôle si les éditeurs affichant un fichier qui a été ouvert au cours de la session doivent se fermer automatiquement lors de la suppression ou le renommage par un autre processus. Cette désactivation gardera l’éditeur ouvert sur un tel événement. Notez que la suppression de l’application fermera toujours l’éditeur et que les fichiers modifiés ne se fermeront jamais pour préserver vos données.
	"workbench.editor.closeOnFileDelete": false,

	// Détermine si les éléments décoratifs de fichiers de l'éditeur doivent utiliser des badges.
	"workbench.editor.decorations.badges": true,

	// Détermine si les éléments décoratifs de fichiers de l'éditeur doivent utiliser des couleurs.
	"workbench.editor.decorations.colors": true,

	// Détermine si les éditeurs ouverts s'affichent en mode aperçu. Les éditeurs en mode aperçu ne restent pas ouverts. Ils sont réutilisés jusqu'à ce qu'ils soient explicitement configurés pour rester ouverts (par exemple via un double clic ou une modification) et s'affichent avec un style de police en italique.
	"workbench.editor.enablePreview": true,

	// Détermine si les éditeurs restent en mode aperçu quand l'utilisateur démarre une navigation dans du code à partir de ces derniers. Les éditeurs en mode aperçu ne restent pas ouverts. Ils sont réutilisés jusqu'à ce qu'ils soient explicitement configurés pour rester ouverts (par exemple via un double clic ou une modification). Cette valeur est ignorée quand '#workbench.editor.enablePreview#' est désactivé.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Détermine si les éditeurs ouverts à partir de Quick Open s'affichent en mode aperçu. Les éditeurs en mode aperçu ne restent pas ouverts. Ils sont réutilisés jusqu'à ce qu'ils soient explicitement configurés pour rester ouverts (par exemple via un double clic ou une modification). Cette valeur est ignorée quand '#workbench.editor.enablePreview#' est désactivé.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// Contrôle si les onglets sont fermés dans l'ordre du dernier utilisé ou de gauche à droite.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Détermine si une bordure supérieure doit être dessinée ou non sur les onglets d'éditeur modifiés. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.highlightModifiedTabs": false,

	// Contrôle le format de l’étiquette pour un éditeur.
	//  - default: Afficher le nom du fichier. Lorsque les onglets sont activés et que deux fichiers portent le même nom dans un groupe, les sections distinctes du chemin de chaque fichier sont ajoutées. Lorsque les onglets sont désactivés, le chemin d’accès relatif au dossier de l'espace de travail est affiché si l’éditeur est actif.
	//  - short: Afficher le nom du fichier suivi du nom de dossier.
	//  - medium: Afficher le nom du fichier suivi de son chemin d’accès relatif au dossier de l'espace de travail.
	//  - long: Afficher le nom du fichier suivi de son chemin d’accès absolu.
	"workbench.editor.labelFormat": "default",

	// Contrôle s'il faut limiter le nombre d'éditeurs ouverts. Quand ce paramètre est activé, les éditeurs les plus anciens utilisés dont l'intégrité n'est pas compromise sont fermés pour permettre l'ouverture des nouveaux éditeurs.
	"workbench.editor.limit.enabled": false,

	// Contrôle si le nombre maximal d'éditeurs ouverts s'applique par groupe d'éditeurs ou pour tous les groupes d'éditeurs.
	"workbench.editor.limit.perEditorGroup": false,

	// Contrôle le nombre maximum d'éditeurs ouverts. Utilisez le paramètre '#workbench.editor.limit.perEditorGroup' pour contrôler cette limite par groupe d'éditeurs ou pour tous les groupes.
	"workbench.editor.limit.value": 10,

	// Parcourir les fichiers ouverts à l'aide des boutons de souris quatre et cinq s'ils sont disponibles.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Permet de définir où s'ouvrent les éditeurs. Sélectionnez `left` ou `right` pour ouvrir les éditeurs à gauche ou à droite de celui actuellement actif. Sélectionnez `first` ou `last` pour ouvrir les éditeurs indépendamment de celui actuellement actif.
	"workbench.editor.openPositioning": "right",

	// Contrôle la direction par défaut des éditeurs ouverts côte à côte (par exemple, à partir de l'Explorateur). Par défaut, les éditeurs s'ouvrent sur le côté droit de celui qui est actif. Si la valeur est 'down', les éditeurs s'ouvrent sous celui qui est actif.
	"workbench.editor.openSideBySideDirection": "right",

	// Contrôle le dimensionnement des onglets d'éditeur épinglés. Les onglets épinglés sont triés et placés au début de tous les onglets ouverts. En règle générale, ils ne se ferment pas tant qu'ils ne sont pas détachés. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	//  - normal: Un onglet épinglé hérite de l'apparence des onglets non épinglés.
	//  - compact: Un onglet épinglé s'affiche de manière compacte avec uniquement une icône ou la première lettre du nom de l'éditeur.
	//  - shrink: Un onglet épinglé se réduit à une taille fixe compacte affichant des parties du nom de l'éditeur.
	"workbench.editor.pinnedTabSizing": "normal",

	// Restaure le dernier état d’affichage de l’éditeur (par exemple, la position de défilement) lors de la réouverture des éditeurs après leur fermeture. L’état d’affichage de l’éditeur est stocké par groupe d’éditeurs et ignoré lorsqu’un groupe se ferme. Utilisez le paramètre « #workbench.editor.sharedViewState# » pour utiliser le dernier état d’affichage connu dans tous les groupes d’éditeurs si aucun état d’affichage précédent n’a été trouvé pour un groupe d’éditeurs.
	"workbench.editor.restoreViewState": true,

	// Contrôle si un éditeur est révélé dans un des groupes visibles si ouvert. Si désactivé, un éditeur préférera s'ouvrir dans le groupe éditeur actuellement actif. Si activé, un éditeur déjà ouvert sera révélé au lieu d’ouvrir à nouveau dans le groupe éditeur actuellement actif. Notez qu’il y a des cas où ce paramètre est ignoré, par exemple lorsque vous forcez un éditeur à s'ouvrir dans un groupe spécifique ou sur le côté du groupe actuellement actif.
	"workbench.editor.revealIfOpen": false,

	// Contrôle si le défilement des onglets permet de les ouvrir ou non. Par défaut, les onglets s'affichent uniquement si vous les faites défiler, mais ils ne s'ouvrent pas. Vous pouvez appuyer de façon prolongée sur la touche Maj pendant le défilement afin de changer le comportement pour cette durée. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.scrollToSwitchTabs": false,

	// Conserve l’état d’affichage de l’éditeur le plus récent (par exemple, la position de défilement) dans tous les groupes d’éditeurs et le restaure si aucun état d’affichage d’éditeur spécifique n’est trouvé pour le groupe d’éditeurs.
	"workbench.editor.sharedViewState": false,

	// Détermine si les éditeurs ouverts doivent s'afficher ou non avec une icône. Cela nécessite notamment l'activation d'un thème d'icône de fichier.
	"workbench.editor.showIcons": true,

	// Contrôle si les éditeurs ouverts devraient être affichés dans des onglets ou non.
	"workbench.editor.showTabs": true,

	// Détermine si vous pouvez séparer les groupes d'éditeurs à partir d'opérations de glisser-déposer, notamment en déposant un éditeur ou un fichier sur les bords de la zone d'éditeur.
	"workbench.editor.splitOnDragAndDrop": true,

	// Contrôle la taille des groupes d'éditeurs pendant leur fractionnement.
	//  - distribute: Divise tous les groupes d'éditeurs à parts égales.
	//  - split: Divise le groupe d'éditeurs actif en parts égales.
	"workbench.editor.splitSizing": "distribute",

	// Contrôle la position des boutons de fermeture des onglets de l'éditeur, ou les désactive quand le paramètre a la valeur 'off'. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.tabCloseButton": "right",

	// Contrôle le dimensionnement des onglets d'éditeur. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	//  - fit: Toujours garder les onglets assez grands pour afficher l’étiquette de l’éditeur complet.
	//  - shrink: Permettre aux onglets d'être plus petits lorsque l’espace disponible n’est pas suffisant pour afficher tous les onglets à la fois.
	"workbench.editor.tabSizing": "fit",

	// Contrôle la hauteur des barres de défilement utilisées pour les onglets et des barres de navigation dans la zone de titre de l'éditeur.
	//  - default: Taille par défaut.
	//  - large: Augmente la taille pour faciliter sa saisie avec la souris.
	"workbench.editor.titleScrollbarSizing": "default",

	// Expérimental. Contrôle si la langue dans un éditeur de texte sans titre est détectée automatiquement, sauf si la langue a été explicitement définie par le sélecteur de langue. Cela peut également être étendu par langue afin que vous puissiez contrôler les langues sur lesquelles vous souhaitez déclencher la détection de langue.
	"workbench.editor.untitled.experimentalLanguageDetection": false,

	// Contrôle si l'indicateur sans titre doit correspondre à du texte en ligne dans l'éditeur ou à un bouton flottant, ou s'il doit être masqué.
	"workbench.editor.untitled.hint": "text",

	// Contrôle le format de l'étiquette pour un éditeur sans titre.
	//  - content: Le nom du fichier sans titre est dérivé du contenu de sa première ligne, sauf si le fichier est associé à un chemin. Le nom est rétabli si la ligne est vide ou si elle ne contient aucun caractère.
	//  - name: Le nom du fichier sans titre n'est pas dérivé du contenu du fichier.
	"workbench.editor.untitled.labelFormat": "content",

	// Détermine si les onglets doivent être placés sur plusieurs lignes quand ils dépassent l'espace disponible, ou si une barre de défilement doit s'afficher à la place. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.wrapTabs": false,

	// Configurez des modèles glob pour les éditeurs (par exemple, `"*.hex": "hexEditor.hexEdit"`). Ces modèles ont priorité sur le comportement par défaut.
	"workbench.editorAssociations": {},

	// Récupère les fonctionnalités expérimentales pour exécuter à partir d’un service en ligne de Microsoft.
	"workbench.enableExperiments": true,

	// Configurez le mode d'ouverture à utiliser pour les URI externes (HTTP, HTTPS).
	"workbench.externalUriOpeners": {},

	// Contrôle la méthode d'aliasing de polices dans le banc d'essai.
	//  - default: Lissage de sous-pixel des polices. Sur la plupart des affichages non-retina, cela vous donnera le texte le plus vif.
	//  - antialiased: Lisser les polices au niveau du pixel, plutôt que les sous-pixels. Peut faire en sorte que la police apparaisse plus légère dans l’ensemble.
	//  - none: Désactive le lissage des polices. Le texte s'affichera avec des bordures dentelées.
	//  - auto: Applique `default` ou `antialiased`automatiquement en se basant sur la résolution de l'affichage.
	"workbench.fontAliasing": "default",

	// Contrôle le délai en millisecondes au-delà duquel le pointage est affiché pour les éléments du banc d'essai (par exemple, certains éléments d'arborescence fournis par l'extension). L'actualisation des éléments déjà visibles peut s'avérer nécessaire pour que le changement apporté au paramètre prenne effet.
	"workbench.hover.delay": 1500,

	// Spécifie le thème d'icône de fichier utilisé dans le banc d'essai ou 'null' pour ne pas afficher les icônes de fichier.
	//  - null: Aucune icône de fichier
	//  - vs-minimal
	//  - vs-seti
	"workbench.iconTheme": "vs-seti",

	// Contrôle si la navigation au clavier dans les listes et les arborescences est automatiquement déclenchée simplement par la frappe. Si défini sur 'false', la navigation au clavier est seulement déclenchée avec l'exécution de la commande 'list.toggleKeyboardNavigation', à laquelle vous pouvez attribuer un raccourci clavier.
	"workbench.list.automaticKeyboardNavigation": true,

	// Multiplicateur de vitesse de défilement quand vous appuyez sur Alt.
	"workbench.list.fastScrollSensitivity": 5,

	// Contrôle si les listes et les arborescences prennent en charge le défilement horizontal dans le banc d'essai. Avertissement : L'activation de ce paramètre a un impact sur les performances.
	"workbench.list.horizontalScrolling": false,

	// Contrôle le style de navigation au clavier pour les listes et les arborescences dans le banc d'essai. Les options sont Simple, Mise en surbrillance et Filtrer.
	//  - simple: La navigation au clavier Simple place le focus sur les éléments qui correspondent à l'entrée de clavier. La mise en correspondance est effectuée sur les préfixes uniquement.
	//  - highlight: La navigation de mise en surbrillance au clavier met en surbrillance les éléments qui correspondent à l'entrée de clavier. La navigation ultérieure vers le haut ou vers le bas parcourt uniquement les éléments mis en surbrillance.
	//  - filter: La navigation au clavier Filtrer filtre et masque tous les éléments qui ne correspondent pas à l'entrée de clavier.
	"workbench.list.keyboardNavigation": "highlight",

	// Un multiplicateur à utiliser sur les deltaX et deltaY des événements de défilement de roulette de souris.
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// Le modificateur à utiliser pour ajouter un élément dans les arbres et listes pour une sélection multiple avec la souris (par exemple dans l’Explorateur, les éditeurs ouverts et la vue scm). Les mouvements de la souris 'Ouvrir à côté' (si pris en charge) s'adapteront tels qu’ils n'entrent pas en conflit avec le modificateur multiselect.
	//  - ctrlCmd: Mappe vers 'Contrôle' dans Windows et Linux, et vers 'Commande' dans macOS.
	//  - alt: Mappe vers 'Alt' dans Windows et Linux, et vers 'Option' dans macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Contrôle l'ouverture des éléments dans les arborescences et les listes à l'aide de la souris (si cela est pris en charge). Notez que certaines arborescences et listes peuvent choisir d'ignorer ce paramètre, s'il est non applicable.
	"workbench.list.openMode": "singleClick",

	// Détermine si les listes et les arborescences ont un défilement fluide.
	"workbench.list.smoothScrolling": false,

	// Contrôle l'emplacement par défaut du panneau (terminal, console de débogage, sortie, problèmes). Il peut s'afficher en bas, à droite ou à gauche du banc d'essai.
	"workbench.panel.defaultLocation": "bottom",

	// Contrôle si le panneau s'ouvre de manière agrandie. Il peut soit toujours s'ouvrir de manière agrandie, soit ne jamais s'ouvrir de manière agrandie, soit s'ouvrir dans le dernier état dans lequel il se trouvait avant sa fermeture.
	//  - always: Toujours ouvrir le panneau de manière agrandie.
	//  - never: Ne jamais ouvrir le panneau de manière agrandie. Le panneau s'ouvre en étant réduit.
	//  - preserve: Ouvrez le panneau dans l'état dans lequel il se trouvait, avant sa fermeture.
	"workbench.panel.opensMaximized": "preserve",

	// Spécifie le thème de couleur par défaut pour l'apparence d'OS sombre quand '#window.autoDetectColorScheme#' est activé.
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// Spécifie le thème de couleur par défaut utilisé en mode de contraste élevé quand '#window.autoDetectHighContrast#' est activé.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// Spécifie le thème de couleur par défaut pour l'apparence d'OS claire quand '#window.autoDetectColorScheme#' est activé.
	"workbench.preferredLightColorTheme": "Default Light+",

	// Spécifie le thème d'icône de produit utilisé.
	//  - Default: Par défaut
	"workbench.productIconTheme": "Default",

	// Contrôles si le menu Quick Open doit se fermer automatiquement dès qu'il perd le focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Détermine si la dernière entrée tapée dans Quick Open doit être restaurée à la prochaine ouverture.
	"workbench.quickOpen.preserveInput": false,

	// Contrôle le délai de rétroaction du pointage (en millisecondes) de la zone de glissement entre les vues/éditeurs.
	"workbench.sash.hoverDelay": 300,

	// Contrôle la taille en pixels de la zone de commentaires de la zone de glissement entre les vues/éditeurs. Affectez-lui une valeur plus élevée si vous pensez qu'il est difficile de redimensionner les vues à l'aide de la souris.
	"workbench.sash.size": 4,

	// Détermine quel éditeur de paramètres utiliser par défaut.
	//  - ui: Utiliser l’éditeur d’interface utilisateur de paramètres.
	//  - json: Utiliser l’éditeur de fichiers JSON.
	"workbench.settings.editor": "ui",

	// Contrôle si vous voulez activer le mode de recherche de langage naturel pour les paramètres de contrôle. La recherche en langage naturel est assurée par un service Microsoft en ligne.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Contrôle si ouvrir les paramètres de raccourcis clavier ouvre également un éditeur affichant toutes les combinaisons de touches par défaut.
	"workbench.settings.openDefaultKeybindings": false,

	// Contrôle si l'ouverture des paramètres ouvre également un éditeur affichant tous les paramètres par défaut.
	"workbench.settings.openDefaultSettings": false,

	// Contrôle le comportement de la table des matières de l'éditeur de paramètres pendant la recherche.
	//  - hide: Masquer la Table des matières lors de la recherche.
	//  - filter: Filtrer la Table des matières à quelques catégories ayant des paramètres correspondants. Cliquer sur une catégorie filtrera les résultats pour cette catégorie.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Contrôle s'il faut utiliser l'éditeur JSON de fractionnement pour modifier les paramètres au format JSON.
	"workbench.settings.useSplitJSON": false,

	// Contrôle l'emplacement de la barre latérale et de la barre d'activité. Elles peuvent s'afficher à gauche ou à droite du banc d'essai.
	"workbench.sideBar.location": "left",

	// Contrôle quel éditeur s’affiche au démarrage, si aucun n'est restauré de la session précédente.
	//  - none: Démarrage sans éditeur.
	//  - welcomePage: Ouvrir la page d’accueil qui propose du contenu pour faciliter la prise en main de VS Code et des extensions.
	//  - readme: Ouvre le fichier README lors de l'ouverture d'un dossier qui en contient un, sinon il revient à 'welcomePage'. Remarque : ceci n'est observé que comme une configuration globale, elle sera ignorée si elle est définie dans une configuration d'espace de travail ou de dossier.
	//  - newUntitledFile: Ouvrez un nouveau fichier sans titre (s'applique uniquement à l'ouverture d'une fenêtre vide).
	//  - welcomePageInEmptyWorkbench: Ouvre la page d'accueil à l'ouverture d'un banc d'essai vide.
	"workbench.startupEditor": "welcomePage",

	// Contrôle la visibilité de la barre d'état au bas du banc d'essai.
	"workbench.statusBar.visible": true,

	// Si cette option est activée, les conseils en filigrane s'affichent quand aucun éditeur n'est ouvert.
	"workbench.tips.enabled": true,

	// Contrôle la façon dont les dossiers de l'arborescence sont développés quand vous cliquez sur les noms de dossiers. Notez que certaines arborescences et listes peuvent choisir d'ignorer ce paramètre, s'il est non applicable.
	"workbench.tree.expandMode": "singleClick",

	// Contrôle la mise en retrait de l'arborescence, en pixels.
	"workbench.tree.indent": 8,

	// Contrôle si l'arborescence doit afficher les repères de mise en retrait.
	"workbench.tree.renderIndentGuides": "onHover",

	// Lorsque cette option est activée, des invites de domaine approuvé s’affichent lors de l’ouverture de liens dans les espaces de travail approuvés.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// Contrôle la visibilité des actions d'en-tête de vue. Les actions d'en-tête de vue peuvent être soit toujours visibles, ou uniquement visibles quand cette vue a le focus ou est survolée.
	"workbench.view.alwaysShowHeaderActions": false,

	// Lorsque cette option est activée, réduisez le mouvement dans la page d’accueil.
	"workbench.welcomePage.preferReducedMotion": false,

	// Lorsqu’elle est activée, la procédure pas à pas d’une extension s’ouvre lors de l’installation de l’extension.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// Contrôle l’affichage de la bannière en mode restreint.
	//  - always: Affichez la bannière chaque fois qu’un espace de travail non approuvé est ouvert.
	//  - untilDismissed: Afficher la bannière lorsqu’un espace de travail non approuvé est ouvert jusqu’à ce qu’il soit ignoré.
	//  - never: N’affichez pas la bannière lorsqu’un espace de travail non approuvé est ouvert.
	"security.workspace.trust.banner": "untilDismissed",

	// Contrôle si la fenêtre vide est approuvée par défaut dans VS Code. Quand cette option est utilisée avec `security.workspace.trust.untrustedFiles`, vous pouvez activer toutes les fonctionnalités de VS Code sans afficher d’invite dans une fenêtre vide.
	"security.workspace.trust.emptyWindow": true,

	// Contrôle si l’approbation d’espace de travail est activée dans VS Code.
	"security.workspace.trust.enabled": true,

	// Contrôle le délai d’affichage de l’invite de démarrage pour l’approbation d’un espace de travail.
	//  - always: Demander l’approbation chaque fois qu’un espace de travail non approuvé est ouvert.
	//  - once: Demander l’approbation la première fois qu’un espace de travail non approuvé est ouvert.
	//  - never: Ne pas demander l’approbation quand un espace de travail non approuvé est ouvert.
	"security.workspace.trust.startupPrompt": "once",

	// Contrôle comment gérer l’ouverture de fichiers non approuvés dans un espace de travail approuvé. Ce paramètre s’applique également à l’ouverture de fichiers dans une fenêtre vide approuvée par le biais de `security.workspace.trust.emptyWindow`.
	//  - prompt: Demander comment gérer les fichiers non approuvés pour chaque espace de travail. Une fois que des fichiers non approuvés ont été introduits dans un espace de travail approuvé, cette demande ne vous sera plus faite.
	//  - open: Toujours autoriser l’introduction de fichiers non approuvés dans un espace de travail approuvé sans invite.
	//  - newWindow: Toujours ouvrir les fichiers non approuvés dans une fenêtre distincte en mode restreint sans invite.
	"security.workspace.trust.untrustedFiles": "prompt",

	// Si cette option est définie, bascule automatiquement vers le thème de couleurs par défaut en fonction du mode de couleurs du système d’exploitation. Si le mode du système d’exploitation est sombre, le thème à utiliser est défini par `workbench.preferredDarkColorTheme#`, ou s’il est clair par `#workbench.preferredLightColorTheme`.
	"window.autoDetectColorScheme": false,

	// Si cette option est activée, le thème à contraste élevé est automatiquement choisi quand le système d’exploitation utilise un thème à contraste élevé. Le thème à contraste élevé à utiliser est défini par `workbench.preferredHighContrastColorTheme`
	"window.autoDetectHighContrast": true,

	// Si activée, cliquer sur une fenêtre inactive activera la fenêtre et déclenchera l’élément sous la souris, si elle est cliquable. Si désactivé, cliquer n’importe où sur une fenêtre inactive va seulement l'activer et un second clic sur l’élément sera nécessaire.
	"window.clickThroughInactive": true,

	// Contrôle si la fermeture du dernier éditeur doit également fermer la fenêtre. Ce paramètre s’applique uniquement pour les fenêtres qui n'affichent pas de dossiers.
	"window.closeWhenEmpty": false,

	// Ajustez l'apparence des fenêtres de dialogue.
	"window.dialogStyle": "native",

	// Si activé, un double clic sur l'icône de l'application dans la barre de titre ferme la fenêtre, laquelle ne peut pas être déplacée par l'icône. Ce paramètre s'applique uniquement quand '#window.titleBarStyle#' est défini sur 'custom'.
	"window.doubleClickIconToClose": false,

	// Détermine si le plein écran natif doit être utilisé sur macOS. Désactivez cette option pour empêcher macOS de créer un espace en cas de passage au plein écran.
	"window.nativeFullScreen": true,

	// Active les onglets macOS Sierra. Notez que vous devez redémarrer l'ordinateur pour appliquer les modifications et que les onglets natifs désactivent tout style de barre de titre personnalisé configuré, le cas échéant.
	"window.nativeTabs": false,

	// Contrôle les dimensions d'ouverture d'une nouvelle fenêtre quand au moins une fenêtre est déjà ouverte. Par défaut, une nouvelle fenêtre s'ouvre au centre de l'écran avec des dimensions réduites. Notez que ce paramètre n'a aucun impact sur la première fenêtre ouverte, laquelle est toujours restaurée à la taille et l'emplacement définis au moment de sa fermeture.
	//  - default: Permet d'ouvrir les nouvelles fenêtres au centre de l'écran.
	//  - inherit: Permet d'ouvrir les nouvelles fenêtres avec la même dimension que la dernière fenêtre active.
	//  - offset: Ouvrez les nouvelles fenêtres avec la même dimension que la dernière fenêtre active et une position décalée.
	//  - maximized: Permet d'ouvrir les nouvelles fenêtres de manière agrandie.
	//  - fullscreen: Permet d'ouvrir les nouvelles fenêtres en mode plein écran.
	"window.newWindowDimensions": "default",

	// Contrôle si les fichiers doivent s’ouvrir dans une nouvelle fenêtre. 
	// Notez qu’il peut encore exister des cas où ce paramètre est ignoré (par exemple lorsque vous utilisez l'option de ligne de commande `--new-window` ou `--reuse-window`).
	//  - on: Les fichiers seront ouverts dans une nouvelle fenêtre.
	//  - off: Les fichiers seront ouverts dans la fenêtre avec le dossier des fichiers ouverts ou la dernière fenêtre active.
	//  - default: Les fichiers seront ouverts dans la fenêtre avec le dossier des fichiers ouverts ou la dernière fenêtre active sauf si ouvert via le Dock ou depuis la recherche.
	"window.openFilesInNewWindow": "off",

	// Contrôle si les dossiers doivent s'ouvrir dans une nouvelle fenêtre ou remplacer la dernière fenêtre active.
	// Notez qu’il peut encore exister des cas où ce paramètre est ignoré (par exemple lorsque vous utilisez l'option de ligne de commande `--new-window` ou `--reuse-window`).
	//  - on: Les dossiers seront ouverts dans une nouvelle fenêtre.
	//  - off: Les dossiers remplaceront la dernière fenêtre active.
	//  - default: Les dossiers seront ouverts dans une nouvelle fenêtre, à moins qu’un dossier est sélectionné dans l’application (par exemple via le menu fichier).
	"window.openFoldersInNewWindow": "default",

	// Contrôle si une nouvelle fenêtre vide doit s’ouvrir lors du démarrage d’une seconde instance sans arguments, ou si la dernière instance en cours d’exécution doit obtenir le focus.
	// Notez qu’il peut encore exister des cas où ce paramètre est ignoré (par exemple lorsque vous utilisez l'option de ligne de commande `--new-window` or `--reuse-window`).
	//  - on: Ouvrir une nouvelle fenêtre vide.
	//  - off: Mettre le focus sur la dernière instance active
	"window.openWithoutArgumentsInNewWindow": "off",

	// Contrôle si une fenêtre doit être restaurée en mode plein écran si elle a été fermée dans ce mode.
	"window.restoreFullscreen": false,

	// Contrôle la façon dont les fenêtres sont rouvertes après le tout premier démarrage. Ce paramètre n'a aucun effet quand l'application est déjà en cours d'exécution.
	//  - preserve: Rouvre toujours toutes les fenêtres. Si un dossier ou un espace de travail est ouvert (par exemple à partir de la ligne de commande), il s'ouvre dans une nouvelle fenêtre, sauf s'il est déjà ouvert. Si des fichiers sont ouverts, ils s'ouvrent dans l'une des fenêtres restaurées.
	//  - all: Rouvre toutes les fenêtres, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - folders: Rouvre toutes les fenêtres qui comportaient des dossiers ou des espaces de travail ouverts, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - one: Rouvre la dernière fenêtre active, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - none: Ne rouvre jamais une fenêtre. À moins qu'un dossier ou un espace de travail ne soit ouvert (par exemple à partir de la ligne de commande), une fenêtre vide s'affiche.
	"window.restoreWindows": "all",

	// Contrôle basé sur l’éditeur actif du titre de la fenêtre. Les variables sont remplacées selon le contexte :
	// - '${activeEditorShort}' : nom du fichier (par ex., myFile.txt).
	// - '${activeEditorMedium}' : chemin du fichier relatif au dossier d'espace de travail (par ex., myFolder/myFileFolder/myFile.txt).
	// - '${activeEditorLong}' : chemin complet du fichier (par ex., /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - '${activeFolderShort}' : nom du dossier contenant le fichier (par ex., myFileFolder).
	// - '${activeFolderMedium}' : chemin du dossier contenant le fichier, relatif au dossier d'espace de travail (par ex., myFolder/myFileFolder).
	// - '${activeFolderLong}' : chemin complet du dossier contenant le fichier (par ex., /Users/Development/myFolder/myFileFolder).
	// - '${folderName} : nom du dossier d'espace de travail contenant le fichier (par ex., myFolder).
	// - '${folderPath}' : chemin de fichier du dossier d'espace de travail contenant le fichier (par ex., /Users/Development/myFolder).
	// - '${rootName}' : nom de l'espace de travail ou du dossier ouvert (par exemple myFolder ou myWorkspace).
	// - '${rootPath}' : chemin de fichier de l'espace de travail ou du dossier ouvert (par exemple /Users/Development/myWorkspace).
	// - « ${appName} » : par exemple, VS Code.
	// - '${remoteName}' : par ex., SSH
	// - '${dirty}' : indicateur erroné si l'éditeur actif est erroné.
	// - '${separator}' : séparateur conditionnel ("-") qui apparaît uniquement quand il est entouré de variables avec des valeurs ou du texte statique.
	"window.title": "${activeEditorShort}${separator}${rootName}",

	// Réglez l'apparence de la barre de titre de la fenêtre. Sur Linux et Windows, ce paramètre affecte aussi l'apparence de l'application et du menu contextuel. L'application des changements nécessite un redémarrage complet.
	"window.titleBarStyle": "custom",

	// Séparateur utilisé par 'window.title'.
	"window.titleSeparator": " — ",

	// Modifiez le niveau de zoom de la fenêtre. La taille d'origine est 0. Chaque incrément supérieur (exemple : 1) ou inférieur (exemple : -1) représente un zoom 20 % plus gros ou plus petit. Vous pouvez également entrer des décimales pour changer le niveau de zoom avec une granularité plus fine.
	"window.zoomLevel": 0,

	// Configurez les associations entre les fichiers et les langages (exemple : "*.extension": "html"`). Celles-ci sont prioritaires sur les associations par défaut des langages installés. 
	"files.associations": {},

	// Quand cette option est activée, l’éditeur tente de deviner l’encodage du jeu de caractères à l’ouverture des fichiers. Ce paramètre peut également être configuré par langue. Notez que ce paramètre n’est pas respecté par la recherche de texte. Seul' #files. Encoding # 'est respecté.
	"files.autoGuessEncoding": false,

	// Contrôle l'enregistrement automatique des éditeurs dont l'intégrité est compromise. Plus d'informations sur l'enregistrement automatique [ici](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
	//  - off: Un éditeur dont l'intégrité est compromise n'est jamais enregistré automatiquement.
	//  - afterDelay: Un éditeur dont l'intégrité est compromise est automatiquement enregistré après le '#files.autoSaveDelay#' configuré.
	//  - onFocusChange: Un éditeur dont l'intégrité est compromise est automatiquement enregistré quand il perd le focus.
	//  - onWindowChange: Un éditeur dont l'intégrité est compromise est automatiquement enregistré quand la fenêtre perd le focus.
	"files.autoSave": "off",

	// Contrôle le délai en ms avant l'enregistrement automatique de l'éditeur dont l'intégrité est compromise. S'applique uniquement quand '#files.autoSave#' est défini sur 'afterDelay'.
	"files.autoSaveDelay": 1000,

	// Mode de langage par défaut attribué aux nouveaux fichiers. S'il est configuré sur '${activeEditorLanguage}', utilise le mode de langage de l'éditeur de texte actif le cas échéant.
	"files.defaultLanguage": "",

	// Déplace les fichiers/dossiers dans la corbeille du système d'exploitation (corbeille sous Windows) lors de la suppression. Désactiver ceci supprimera définitivement les fichiers/dossiers.
	"files.enableTrash": true,

	// Encodage de jeu de caractères par défaut à utiliser lors de la lecture et l’écriture des fichiers. Ce paramètre peut également être configuré par langage.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// Caractère de fin de ligne par défaut.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Utilise le caractère de fin de ligne spécifique du système d'exploitation.
	"files.eol": "auto",

	// Configurez les modèles Glob pour l'exclusion des fichiers et des dossiers. Par exemple, l'Explorateur de fichiers affiche ou masque les fichiers et dossiers en fonction de ce paramètre. Consultez le paramètre '#search.exclude#' pour définir des exclusions spécifiques à la recherche. Vous trouverez plus d'informations sur les modèles Glob [ici](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true
	},

	// Contrôle si les fichiers non enregistrés sont mémorisés entre les sessions, ce qui permet d'ignorer la demande d'enregistrement à la sortie de l'éditeur.
	//  - off: Désactivez la sortie à chaud. Une invite s'affiche quand vous tentez de fermer une fenêtre avec des fichiers dont l'intégrité est compromise.
	//  - onExit: La sortie à chaud se déclenche quand la dernière fenêtre est fermée dans Windows/Linux, ou quand la commande 'workbench.action.quit' se déclenche (palette de commandes, combinaison de touches, menu). Toutes les fenêtres qui n'ont pas de dossiers ouverts sont restaurées au prochain lancement. Une liste des fenêtres ouvertes avec des fichiers non enregistrés est accessible via Fichier > Ouvrir les éléments récents > Plus...
	//  - onExitAndWindowClose: La sortie à chaud se déclenche quand la dernière fenêtre est fermée dans Windows/Linux, ou quand la commande 'workbench.action.quit' se déclenche (palette de commandes, combinaison de touches, menu) ainsi que pour toute fenêtre comportant un dossier ouvert, qu'il s'agisse ou non de la dernière fenêtre. Toutes les fenêtres qui n'ont pas de dossiers ouverts sont restaurées au prochain lancement. Une liste des fenêtres ouvertes avec des fichiers non enregistrés est accessible via Fichier > Ouvrir les éléments récents > Plus...
	"files.hotExit": "onExit",

	// Quand l'option est activée, une nouvelle ligne finale est insérée à la fin du fichier au moment de son enregistrement.
	"files.insertFinalNewline": false,

	// Contrôle la mémoire disponible pour VS Code après le redémarrage en cas de tentative d'ouverture de fichiers volumineux. Même effet que de spécifier '--max-memory=NEWSIZE' sur la ligne de commande.
	"files.maxMemoryForLargeFilesMB": 4096,

	// Délai d'attente en millisecondes après lequel les participants pour la création, le renommage et la suppression de fichier sont supprimés. Utilisez '0' pour désactiver les participants.
	"files.participants.timeout": 60000,

	// Restaurez la pile des opérations d'annulation à la réouverture d'un fichier.
	"files.restoreUndoStack": true,

	// Un conflit d'enregistrement peut se produire quand un fichier est enregistré sur un disque qui a été modifié par un autre programme dans l'intervalle. Pour éviter une perte de données, l'utilisateur est invité à comparer les changements dans l'éditeur avec la version sur disque. Changez ce paramètre seulement si vous rencontrez fréquemment des erreurs de conflit d'enregistrement, car il peut entraîner une perte de données s'il est utilisé sans précaution.
	//  - askUser: Refuse l'enregistrement et demande la résolution manuelle du conflit d'enregistrement.
	//  - overwriteFileOnDisk: Résout le conflit d'enregistrement en remplaçant le fichier sur le disque par les changements effectués dans l'éditeur.
	"files.saveConflictResolution": "askUser",

	// Active la boîte de dialogue de fichier simple, qui remplace alors la boîte de dialogue de fichier système.
	"files.simpleDialog.enable": false,

	// Si l'option est activée, va supprimer toutes les nouvelles lignes après la dernière ligne à la fin du fichier lors de l’enregistrement.
	"files.trimFinalNewlines": false,

	// Si l'option est activée, l'espace blanc de fin est supprimé au moment de l'enregistrement d'un fichier.
	"files.trimTrailingWhitespace": false,

	// Configurez les modèles Glob des chemins d’accès aux fichiers à exclure de la surveillance des fichiers. Les modèles doivent correspondre à des chemins absolus, à savoir le préfixe « **/ » ou le chemin complet pour une correspondance appropriée et le suffixe « /** » pour la correspondance avec les fichiers à l’intérieur d’un chemin (par exemple, « /build/output/** » ou « /Users/name/workspaces/project/build/output/** »). Le changement de ce paramètre nécessite un redémarrage. Si vous constatez que le code consomme beaucoup de temps processeur au démarrage, vous pouvez exclure les dossiers volumineux pour réduire la charge initiale.
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// Contrôle la taille de police (en pixels) du clavier en mode de capture vidéo d'écran.
	"screencastMode.fontSize": 56,

	// Contrôle la durée (en millisecondes) d'affichage de la superposition du clavier en mode capture vidéo.
	"screencastMode.keyboardOverlayTimeout": 800,

	// Contrôle la couleur hexadécimale (#RGB, #RGBA, #RRGGBB ou #RRGGBBAA) de l'indicateur de la souris en mode capture vidéo.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// Contrôle la taille (en pixels) de l'indicateur de la souris en mode capture vidéo.
	"screencastMode.mouseIndicatorSize": 20,

	// Affichez uniquement les raccourcis clavier en mode capture d'écran.
	"screencastMode.onlyKeyboardShortcuts": false,

	// Contrôle le décalage vertical de la superposition du mode de capture vidéo depuis le bas par rapport à la hauteur du Workbench.
	"screencastMode.verticalOffset": 20,

	// Contrôle si activer le Mode Zen centre également la mise en page.
	"zenMode.centerLayout": true,

	// Contrôle si activer le Mode Zen met aussi le workbench en mode plein écran.
	"zenMode.fullScreen": true,

	// Contrôle si l'activation du mode Zen masque également la barre d'activités à gauche ou à droite du banc d'essai.
	"zenMode.hideActivityBar": true,

	// Contrôle si l'activation du mode Zen masque aussi les numéros de ligne de l'éditeur.
	"zenMode.hideLineNumbers": true,

	// Contrôle si l'activation du mode Zen masque également la barre d’état au bas du banc d'essai.
	"zenMode.hideStatusBar": true,

	// Contrôle si l'activation du mode Zen masque également les onglets du banc d'essai.
	"zenMode.hideTabs": true,

	// Détermine si une fenêtre doit être restaurée en mode zen, si celle-ci a été fermée en mode zen.
	"zenMode.restore": true,

	// Contrôle si les notifications sont affichées en mode zen. Si tel est le cas, seules les notifications d'erreur s'affichent.
	"zenMode.silentNotifications": true,

	// Contrôle si l’Explorateur devrait automatiquement révéler et sélectionner les fichiers lors de leur ouverture.
	//  - true: Les fichiers sont révélés et sélectionnés.
	//  - false: Les fichiers ne sont pas révélés et sélectionnés.
	//  - focusNoScroll: Les fichiers ne défilent pas dans la vue, mais ils ont toujours le focus.
	"explorer.autoReveal": true,

	// Contrôle si l'explorateur doit afficher les dossiers de manière compacte. Sous cette forme, les dossiers enfant sont compressés individuellement dans un élément d'arborescence combiné. Utile pour les structures de package Java, par exemple.
	"explorer.compactFolders": true,

	// Contrôle si l’Explorateur devrait demander confirmation lorsque vous supprimez un fichier via la corbeille.
	"explorer.confirmDelete": true,

	// Contrôle si l’Explorateur doit demander confirmation pour déplacer des fichiers et des dossiers par glisser/déplacer.
	"explorer.confirmDragAndDrop": true,

	// Caractère de séparation de chemin utilisé lors de la copie de chemins d’accès relatifs au fichier.
	//  - /: Utilisez la barre oblique comme caractère de séparation du chemin d’accès.
	//  - \: Utilisez la barre oblique inverse comme caractère de séparation du chemin d’accès.
	//  - auto: Utilise un caractère de séparation de chemin d’accès spécifique au système d’exploitation.
	"explorer.copyRelativePathSeparator": "auto",

	// Contrôle si les décorations de fichier devraient utiliser des badges.
	"explorer.decorations.badges": true,

	// Contrôle si les décorations de fichier devraient utiliser des couleurs.
	"explorer.decorations.colors": true,

	// Détermine si l'Explorateur autorise le déplacement des fichiers et des dossiers par glisser-déposer. Ce paramètre affecte uniquement le glisser-déposer dans l'Explorateur.
	"explorer.enableDragAndDrop": true,

	// Contrôle la stratégie de nommage à utiliser lorsque vous donnez un nouveau nom à un élément dupliqué d'Explorer à coller.
	//  - simple: Ajoute le mot « copy » à la fin du nom dupliqué, potentiellement suivi par un nombre
	//  - smart: Ajoute un nombre à la fin du nom dupliqué. Si le nom comporte déjà un nombre, essayez d'augmenter ce nombre
	"explorer.incrementalNaming": "simple",

	// Contrôle l'ordre de tri des éditeurs dans le volet Éditeurs ouverts.
	//  - editorOrder: Les éditeurs sont triés dans l'ordre selon lequel les onglets d'éditeur sont affichés.
	//  - alphabetical: Les éditeurs sont triés par ordre alphabétique dans chaque groupe d'éditeurs.
	"explorer.openEditors.sortOrder": "editorOrder",

	// Nombre d'éditeurs affichés dans le volet Éditeurs ouverts. Si la valeur est 0, le volet Éditeurs ouverts est masqué.
	"explorer.openEditors.visible": 9,

	// Contrôle le tri des fichiers et des dossiers selon les propriétés dans l’explorateur.
	//  - default: Les fichiers et dossiers sont triés par nom. Les dossiers sont affichés avant les fichiers.
	//  - mixed: Les fichiers et dossiers sont triés par nom. Les fichiers sont imbriqués dans les dossiers.
	//  - filesFirst: Les fichiers et dossiers sont triés par nom. Les fichiers sont affichés avant les dossiers.
	//  - type: Les fichiers et dossiers sont groupés par type d’extension puis triés par nom. Les dossiers sont affichés avant les fichiers.
	//  - modified: Les fichiers et dossiers sont triés par date de dernière modification dans l’ordre décroissant. Les dossiers sont affichés avant les fichiers.
	"explorer.sortOrder": "default",

	// Contrôle le tri lexicographique des noms de fichiers et de dossiers dans l’explorateur.
	//  - default: Les noms en majuscules et en minuscules ne sont pas séparés.
	//  - upper: Les noms en majuscules sont regroupés avant les noms en minuscules.
	//  - lower: Les noms en minuscules sont regroupés avant les noms en majuscules.
	//  - unicode: Les noms sont triés dans l’ordre Unicode.
	"explorer.sortOrderLexicographicOptions": "default",

	// Contrôle le positionnement de la barre d'action sur des lignes dans la vue de recherche.
	//  - auto: Positionnez la barre d'action à droite quand la vue de recherche est étroite et immédiatement après le contenu quand la vue de recherche est large.
	//  - right: Positionnez toujours la barre d'action à droite.
	"search.actionsPosition": "right",

	// Contrôle si les résultats de recherche seront réduits ou développés.
	//  - auto: Les fichiers avec moins de 10 résultats sont développés. Les autres sont réduits.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// Configurez des modèles glob pour exclure des fichiers et des dossiers dans les recherches en texte intégral et le mode Quick Open. Hérite tous les modèles glob du paramètre '#files.exclude#'. Découvrez plus d'informations sur les modèles glob [ici](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// Contrôle s'il faut suivre les symlinks pendant la recherche.
	"search.followSymlinks": true,

	// Contrôle si la vue de recherche doit lire ou modifier le presse-papiers partagé sur macOS.
	"search.globalFindClipboard": false,

	// Ce paramètre est déprécié. Faites plutôt glisser l’icône de recherche vers un nouvel emplacement.
	// Contrôle si la recherche s’affiche comme une vue dans la barre latérale ou comme un panneau dans la zone de panneaux pour plus d'espace horizontal.
	"search.location": "sidebar",

	// Si activé, le processus searchService est maintenu actif au lieu d'être arrêté au bout d'une heure d'inactivité. Ce paramètre conserve le cache de recherche de fichier en mémoire.
	"search.maintainFileSearchCache": false,

	// Contrôle le nombre maximal de résultats de la recherche, ce paramètre peut être défini sur «null» (vide) pour obtenir des résultats illimités.
	"search.maxResults": 20000,

	// Contrôle l'emplacement d'exécution des opérations Rechercher : Rechercher dans les fichiers et Rechercher dans le dossier. Cet emplacement correspond soit à la vue de recherche de la barre latérale, soit à un éditeur de recherche
	//  - view: Rechercher dans la vue de recherche, soit dans le panneau, soit dans la barre latérale.
	//  - reuseEditor: Effectue la recherche dans un éditeur de recherche existant, le cas échéant, sinon effectue la recherche dans un nouvel éditeur de recherche.
	//  - newEditor: Effectue la recherche dans un nouvel éditeur de recherche.
	"search.mode": "view",

	// Contrôle l'ordre de tri de l'historique de l'éditeur en mode Quick Open pendant le filtrage.
	//  - default: Les entrées d'historique sont triées par pertinence en fonction de la valeur de filtre utilisée. Les entrées les plus pertinentes apparaissent en premier.
	//  - recency: Les entrées d'historique sont triées par date. Les dernières entrées ouvertes sont affichées en premier.
	"search.quickOpen.history.filterSortOrder": "default",

	// Indique si vous souhaitez inclure les résultats de fichiers récemment ouverts dans les résultats de fichiers pour Quick Open.
	"search.quickOpen.includeHistory": true,

	// Indique s’il faut inclure les résultats d’une recherche de symbole global dans les résultats de fichier pour Quick Open.
	"search.quickOpen.includeSymbols": false,

	// Nombre par défaut de lignes de contexte avoisinantes à utiliser au moment de la création d'éditeurs de recherche. Si vous utilisez '#search.searchEditor.reusePriorSearchConfiguration#', vous pouvez lui affecter la valeur 'null' (vide) pour utiliser la configuration précédente de l'éditeur de recherche.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// Configurez ce qui se passe après un double clic sur un résultat dans un éditeur de recherche.
	//  - selectWord: Double-cliquez pour sélectionner le mot sous le curseur.
	//  - goToLocation: Double-cliquez sur le résultat pour l'ouvrir dans le groupe d'éditeurs actif.
	//  - openLocationToSide: Double-cliquez pour ouvrir le résultat dans le groupe d'éditeurs ouvert ou dans un nouveau groupe d'éditeurs le cas échéant.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// Quand cette option est activée, les nouveaux éditeurs de recherche réutilisent les inclusions, exclusions et indicateurs du dernier éditeur de recherche ouvert.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// Recherchez dans tous les fichiers à mesure que vous tapez.
	"search.searchOnType": true,

	// Quand '#search.searchOnType' est activé, contrôle le délai d'attente avant expiration en millisecondes entre l'entrée d'un caractère et le démarrage de la recherche. N'a aucun effet quand 'search.searchOnType' est désactivé.
	"search.searchOnTypeDebouncePeriod": 300,

	// Mettez à jour la requête de recherche en fonction du texte sélectionné de l'éditeur quand vous placez le focus sur la vue de recherche. Cela se produit soit au moment du clic de souris, soit au déclenchement de la commande 'workbench.views.search.focus'.
	"search.seedOnFocus": false,

	// Activez l'essaimage de la recherche à partir du mot le plus proche du curseur quand l'éditeur actif n'a aucune sélection.
	"search.seedWithNearestWord": false,

	// Détermine s'il faut afficher les numéros de ligne dans les résultats de recherche.
	"search.showLineNumbers": false,

	// Faire une recherche non sensible à la casse si le modèle est tout en minuscules, dans le cas contraire, faire une rechercher sensible à la casse.
	"search.smartCase": false,

	// Contrôle l'ordre de tri des résultats de recherche.
	//  - default: Les résultats sont triés par dossier et noms de fichier, dans l'ordre alphabétique.
	//  - fileNames: Les résultats sont triés par noms de fichier en ignorant l'ordre des dossiers, dans l'ordre alphabétique.
	//  - type: Les résultats sont triés par extensions de fichier dans l'ordre alphabétique.
	//  - modified: Les résultats sont triés par date de dernière modification de fichier, dans l'ordre décroissant.
	//  - countDescending: Les résultats sont triés par nombre dans chaque fichier, dans l'ordre décroissant.
	//  - countAscending: Les résultats sont triés par nombre dans chaque fichier, dans l'ordre croissant.
	"search.sortOrder": "default",

	// Détermine s'il faut utiliser les fichiers généraux '.gitignore' et '.ignore' pendant la recherche de fichiers.
	"search.useGlobalIgnoreFiles": false,

	// Contrôle s'il faut utiliser les fichiers `.gitignore` et `.ignore` par défaut pendant la recherche de fichiers.
	"search.useIgnoreFiles": true,

	// Déprécié. PCRE2 est utilisé automatiquement lors de l'utilisation de fonctionnalités regex qui ne sont prises en charge que par PCRE2.
	// Détermine s'il faut utiliser le moteur regex PCRE2 dans la recherche de texte. Cette option permet d'utiliser des fonctionnalités regex avancées comme lookahead et les références arrière. Toutefois, les fonctionnalités PCRE2 ne sont pas toutes prises en charge, seulement celles qui sont aussi prises en charge par JavaScript.
	"search.usePCRE2": false,

	// Détermine s'il faut ouvrir l'aperçu du remplacement quand vous sélectionnez ou remplacez une correspondance.
	"search.useReplacePreview": true,

	// Déprécié. Utilisez "search.usePCRE2" pour prendre en charge la fonctionnalité regex avancée.
	// Ce paramètre est déprécié et remplacé par "search.usePCRE2".
	"search.useRipgrep": true,

	// Contrôle la logique de distribution des appuis sur les touches pour utiliser soit 'code' (recommandé), soit 'keyCode'.
	"keyboard.dispatch": "code",

	// Active les boutons de la touchbar macOS sur le clavier si disponible.
	"keyboard.touchbar.enabled": true,

	// Ensemble d'identificateurs pour les entrées de la Touch Bar qui ne doivent pas apparaître (par exemple 'workbench.action.navigateBack').
	"keyboard.touchbar.ignored": [],

	// Paramètre proxy à utiliser. S'il n'est pas défini, il est hérité des variables d'environnement 'http_proxy' et 'https_proxy'.
	"http.proxy": "",

	// Valeur à envoyer comme en-tête 'Proxy-Authorization' pour chaque demande de réseau.
	"http.proxyAuthorization": null,

	// Spécifie si le certificat de serveur proxy doit être vérifié par rapport à la liste des autorités de certification fournies.
	"http.proxyStrictSSL": true,

	// Utilisez la prise en charge du proxy pour les extensions.
	//  - off: Désactivez la prise en charge de proxy pour les extensions.
	//  - on: Activez la prise en charge de proxy pour les extensions.
	//  - fallback: Activer la prise en charge du proxy pour les extensions, revenir aux options de demande quand aucun proxy n’a été trouvé.
	//  - override: Activer le support de proxy pour les extensions, remplacer les options de demande.
	"http.proxySupport": "override",

	// Contrôle si les certificats d'autorité de certification doivent être chargés à partir de l'OS. (Sur Windows et macOS, vous devez recharger la fenêtre après la désactivation de ce paramètre.)
	"http.systemCertificates": true,

	// Ce paramètre est déprécié, utilisez 'update.mode' à la place.
	// Choisissez si vous voulez recevoir des mises à jour automatiques. Nécessite un redémarrage après le changement. Les mises à jour sont récupérées auprès d'un service en ligne Microsoft.
	"update.channel": "default",

	// Choisissez si vous voulez recevoir des mises à jour automatiques. Nécessite un redémarrage après le changement. Les mises à jour sont récupérées auprès d'un service en ligne Microsoft.
	//  - none: Désactivez les mises à jour.
	//  - manual: Désactivez la recherche de mises à jour automatique en arrière-plan. Les mises à jour sont disponibles si vous les rechercher manuellement.
	//  - start: Vérifiez les mises à jour uniquement au démarrage. Désactivez les vérifications de mises à jour d'arrière-plan automatiques.
	//  - default: Activez la recherche de mises à jour automatique pour que VS Code recherche les mises à jour automatiquement et régulièrement.
	"update.mode": "default",

	// Afficher les Notes de publication après une mise à jour. Les Notes de publication sont téléchargées depuis un service en ligne de Microsoft.
	"update.showReleaseNotes": true,

	// Contrôle quand le panneau des composants doit s'ouvrir.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Permettre de définir des points d’arrêt dans n’importe quel fichier.
	"debug.allowBreakpointsEverywhere": false,

	// Contrôle s'il faut fermer automatiquement la console de débogage à la fin de la session de débogage.
	"debug.console.closeOnEnd": false,

	// Contrôle si la console de débogage doit réduire les lignes identiques et afficher un certain nombre d'occurrences avec un badge.
	"debug.console.collapseIdenticalLines": true,

	// Contrôle la famille de polices dans la console de débogage.
	"debug.console.fontFamily": "default",

	// Contrôle la taille de police en pixels dans la console de débogage.
	"debug.console.fontSize": 12,

	// Contrôle si la console de débogage doit suggérer une entrée déjà tapée.
	"debug.console.historySuggestions": true,

	// Contrôle la hauteur de ligne en pixels dans la console de débogage. Utilisez 0 pour calculer la hauteur de ligne à partir de la taille de police.
	"debug.console.lineHeight": 0,

	// Contrôle si le retour automatique à la ligne est activé dans la console de débogage.
	"debug.console.wordWrap": true,

	// Contrôle si la fenêtre Workbench doit être ciblée lorsque le débogueur s'arrête.
	"debug.focusWindowOnBreak": true,

	// Afficher les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - true: Affiche toujours les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - false: N'affiche jamais les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - auto: Affiche les valeurs des variables inline dans l'éditeur au moment du débogage, si le langage prend en charge les emplacements de valeurs inline.
	"debug.inlineValues": "auto",

	// Contrôle le moment où la console de débogage interne doit s’ouvrir.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Contrôle ce qu'il faut faire en cas d'erreurs après l'exécution d'une tâche de prélancement.
	//  - debugAnyway: Ignorer les erreurs de tâche et démarrer le débogage.
	//  - showErrors: Afficher la vue Problèmes et ne pas démarrer le débogage.
	//  - prompt: Demandez à l'utilisateur.
	//  - abort: Annuler le débogage.
	"debug.onTaskErrors": "prompt",

	// Contrôle le moment où la vue de débogage doit s’ouvrir.
	"debug.openDebug": "openOnDebugBreak",

	// Ouvre automatiquement la vue Explorateur à la fin d'une session de débogage.
	"debug.openExplorerOnEnd": false,

	// Contrôle les éditeurs à enregistrer avant le démarrage d'une session de débogage.
	//  - allEditorsInActiveGroup: Enregistre tous les éditeurs du groupe actif avant le démarrage d'une session de débogage.
	//  - nonUntitledEditorsInActiveGroup: Enregistre tous les éditeurs du groupe actif à l'exception de ceux qui n'ont pas de titre avant le démarrage d'une session de débogage.
	//  - none: N'enregistre aucun éditeur avant le démarrage d'une session de débogage.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// Contrôle si les points d'arrêt doivent être affichés dans la règle d'aperçu.
	"debug.showBreakpointsInOverviewRuler": false,

	// Contrôle si les décorations de candidat des points d'arrêt inline doivent être affichées dans l'éditeur pendant le débogage.
	"debug.showInlineBreakpointCandidates": true,

	// Contrôle le moment où la barre d’état de débogage doit être visible.
	//  - never: Ne jamais afficher debug dans la barre d'état
	//  - always: Toujours afficher debug dans la barre d’état
	//  - onFirstSessionStart: Afficher debug dans seule la barre d’état après que le débogage a été lancé pour la première fois
	"debug.showInStatusBar": "onFirstSessionStart",

	// Contrôle si les sous-sessions de débogage sont affichées dans la barre d'outils de débogage. Quand ce paramètre a la valeur false, la commande stop sur une sous-session arrête également la session parente.
	"debug.showSubSessionsInToolBar": false,

	// Avant de démarrer une nouvelle session de débogage dans un terminal intégré ou externe, effacez le terminal.
	"debug.terminal.clearBeforeReusing": false,

	// Contrôle l'emplacement de la barre d'outils de débogage. Les options sont 'floating' dans toutes les vues, 'docked' dans la vue de débogage ou 'hidden'.
	"debug.toolBarLocation": "floating",

	// Configuration de lancement du débogage global. Doit être utilisée à la place de 'launch.json' qui est partagé entre les espaces de travail.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Activez/désactivez la fermeture automatique des balises HTML.
	"html.autoClosingTags": true,

	// Liste de chemins de fichiers relatifs pointant vers des fichiers JSON respectant le [format de données personnalisé](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code charge des données personnalisées au démarrage pour améliorer la prise en charge des balises, attributs et valeurs d’attribut HTML personnalisés que vous spécifiez dans les fichiers JSON.
	// 
	// Les chemins de fichiers sont relatifs à l’espace de travail, et seuls les paramètres de dossier d’espace de travail sont pris en compte.
	"html.customData": [],

	// Liste des balises, séparés par des virgules, où le contenu ne devrait pas être reformaté. `null` par défaut pour la balise `pre`.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Activer/désactiver le formateur HTML par défaut.
	"html.format.enable": true,

	// Finissez par un caractère de nouvelle ligne.
	"html.format.endWithNewline": false,

	// Liste des balises, séparées par des virgules, qui devraient avoir un saut de ligne supplémentaire devant eux. `null` par défaut pour `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Mettez en forme et indenter `{{#foo}}`, ainsi que `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Mettez en retrait les sections '<head>' et '<body>'.
	"html.format.indentInnerHtml": false,

	// Nombre maximal de sauts de ligne à être conservés dans un segment unique. Utiliser `null` pour illimité.
	"html.format.maxPreserveNewLines": null,

	// Contrôle si les sauts de ligne existants avant des éléments doivent être préservés. Fonctionne uniquement avant des éléments, pas à l’intérieur de balises ou dans le texte.
	"html.format.preserveNewLines": true,

	// Privilégie les balises de langage de templating django, erb, handlebars et php.
	"html.format.templating": false,

	// Liste des balises, séparées par des virgules, qui ne devrait pas être reformatées. `null` par défaut toutes les balises répertoriées dans https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Garde ensemble le contenu du texte dans cette chaîne.
	"html.format.unformattedContentDelimiter": "",

	// Retour à la ligne des attributs.
	//  - auto: Retour automatique à la ligne des attributs uniquement en cas de dépassement de la longueur de la ligne.
	//  - force: Retour automatique à la ligne de chaque attribut, sauf le premier.
	//  - force-aligned: Retour automatique à la ligne de chaque attribut, sauf le premier, avec maintien de l'alignement.
	//  - force-expand-multiline: Retour automatique à la ligne de chaque attribut.
	//  - aligned-multiple: Entourer lorsque la longueur de ligne est dépassée, aligner verticalement les attributs.
	//  - preserve: Conserve le retour à la ligne des attributs.
	//  - preserve-aligned: Conservez le wrapping des attributs, mais alignez-les.
	"html.format.wrapAttributes": "auto",

	// Taille de l'alignement en cas d'utilisation de 'force-aligned' et 'aligned-multiple' dans '#html.format.wrapAttributes#', ou valeur 'null' pour permettre l'utilisation de la taille de mise en retrait par défaut.
	"html.format.wrapAttributesIndentSize": null,

	// Nombre maximal de caractères par ligne (0 = désactiver).
	"html.format.wrapLineLength": 120,

	// Affiche la documentation relative aux balises et aux attributs quand le curseur passe sur l'élément.
	"html.hover.documentation": true,

	// Affiche les références à MDN quand le curseur passe sur l'élément.
	"html.hover.references": true,

	// Déprécié au profit de 'editor.linkedEditing'
	// Activez/désactivez le curseur de mise en miroir sur la balise HTML correspondante.
	"html.mirrorCursorOnMatchingTag": false,

	// Contrôle si la prise en charge intégrée du langage HTML propose des balises, des propriétés et des valeurs HTML5.
	"html.suggest.html5": true,

	// Trace la communication entre VS Code et le serveur de langage HTML.
	"html.trace.server": "off",

	// Contrôle si la prise en charge intégrée du langage HTML valide les scripts incorporés.
	"html.validate.scripts": true,

	// Contrôle si la prise en charge intégrée du langage HTML valide les styles incorporés.
	"html.validate.styles": true,

	// Le paramètre 'json.colorDecorators.enable' a été déprécié en faveur de 'editor.colorDecorators'.
	// Active ou désactive les éléments décoratifs de couleurs
	"json.colorDecorators.enable": true,

	// Activer/désactiver le formateur JSON par défaut
	"json.format.enable": true,

	// Nombre maximal de symboles de plan et de régions de pliage calculé (limité pour des raisons de performances).
	"json.maxItemsComputed": 5000,

	// Quand ils sont activés, les schémas JSON peuvent être récupérés (fetch) à partir des emplacements http et https.
	"json.schemaDownload.enable": true,

	// Associe les schémas aux fichiers JSON dans le projet actif.
	"json.schemas": [],

	// Trace la communication entre VS Code et le serveur de langage JSON.
	"json.trace.server": "off",

	// Contrôle l'emplacement où doivent s'ouvrir les liens dans les fichiers Markdown.
	//  - currentGroup: Ouvrez les liens dans le groupe d'éditeurs actif.
	//  - beside: Ouvrez les liens à côté de l'éditeur actif.
	"markdown.links.openLocation": "currentGroup",

	// Définit la façon dont les sauts de ligne sont affichés dans l'aperçu Markdown. Si vous affectez la valeur 'true', un <br> est créé pour les nouvelles lignes à l'intérieur des paragraphes.
	"markdown.preview.breaks": false,

	// Double-cliquez dans l'aperçu Markdown pour passer à l'éditeur.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Contrôle la famille de polices utilisée dans l'aperçu Markdown.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Contrôle la taille de police en pixels utilisée dans l'aperçu Markdown.
	"markdown.preview.fontSize": 14,

	// Contrôle la hauteur de ligne utilisée dans l'aperçu Markdown. Ce nombre est relatif à la taille de police.
	"markdown.preview.lineHeight": 1.6,

	// Active ou désactive la conversion de texte de type URL en liens dans l'aperçu Markdown.
	"markdown.preview.linkify": true,

	// Marque la sélection actuelle de l'éditeur dans l'aperçu Markdown.
	"markdown.preview.markEditorSelection": true,

	// Contrôle la façon dont les liens vers d'autres fichiers Markdown doivent s'ouvrir dans l'aperçu Markdown.
	//  - inPreview: Tente d'ouvrir les liens dans l'aperçu Markdown.
	//  - inEditor: Tente d'ouvrir les liens dans l'éditeur.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// Quand un aperçu Markdown défile, la vue de l'éditeur est mise à jour.
	"markdown.preview.scrollEditorWithPreview": true,

	// Quand la fenêtre de l'éditeur Markdown défile, la vue de l'aperçu est mise à jour.
	"markdown.preview.scrollPreviewWithEditor": true,

	// Active ou désactive certains remplacements indépendants du langage ainsi que l'amélioration de la présentation des guillemets dans l'aperçu Markdown.
	"markdown.preview.typographer": false,

	// Liste d'URL ou de chemins locaux de feuilles de style CSS à utiliser dans l'aperçu Markdown. Les chemins relatifs sont interprétés par rapport au dossier ouvert dans l'Explorateur. Si aucun dossier n'est ouvert, ils sont interprétés par rapport à l'emplacement du fichier Markdown. Tous les signes '\' doivent être écrits sous la forme '\\'.
	"markdown.styles": [],

	// Active la journalisation du débogage pour l'extension Markdown.
	"markdown.trace": "off",

	// Contrôle si les suggestions de langage PHP intégrées sont activées. Le support suggère les globales et variables PHP.
	"php.suggest.basic": true,

	// Activez/désactivez la validation PHP intégrée.
	"php.validate.enable": true,

	// Pointe vers l'exécutable PHP.
	"php.validate.executablePath": null,

	// Spécifie si linter est exécuté au moment de l'enregistrement ou de la saisie.
	"php.validate.run": "onSave",

	// Active/désactive la fermeture automatique des balises JSX.
	"javascript.autoClosingTags": true,

	// Activez/désactivez le formateur JavaScript par défaut.
	"javascript.format.enable": true,

	// Définit le traitement des espaces après une virgule de délimitation.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// Définit le traitement des espaces après le mot clé du constructeur.
	"javascript.format.insertSpaceAfterConstructor": false,

	// Définit le traitement des espaces après le mot clé function pour les fonctions anonymes.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Définit la gestion des espaces après les mots clés dans une instruction de flux de contrôle.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Définit le traitement des espaces après l'ouverture et avant la fermeture d'accolades vides.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades d'expression JSX.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades non vides.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Définit l’espace après ouverture et avant la fermeture de crochets non vides.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Définit l’espace après ouverture et avant la fermeture de parenthèses non vides.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades de chaîne de modèle.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	//  Définit le traitement des espaces après un point-virgule dans une instruction for.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Définit le traitement des espaces après un opérateur binaire.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Définit le traitement des espaces avant les parenthèses d'arguments de la fonction.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Définit si une accolade ouvrante dans un bloc de contrôle est placée ou non sur une nouvelle ligne.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Définit si une accolade ouvrante dans une fonction est placée ou non sur une nouvelle ligne.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Définit la gestion des points-virgules facultatifs. Nécessite l'utilisation de TypeScript 3.7 ou plus récent dans l'espace de travail.
	//  - ignore: N'insérez ou n'enlevez aucun point-virgule.
	//  - insert: Insérez des points-virgules à la fin des instructions.
	//  - remove: Supprimez les points-virgules inutiles.
	"javascript.format.semicolons": "ignore",

	// Ce paramètre est déprécié au profit de 'js/ts.implicitProjectConfig.checkJs'.
	// Active/désactive la vérification sémantique des fichiers JavaScript. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.
	"javascript.implicitProjectConfig.checkJs": false,

	// Ce paramètre est déprécié au profit de 'js/ts.implicitProjectConfig.experimentalDecorators'.
	// Active/désactive 'experimentalDecorators' dans les fichiers JavaScript qui ne font pas partie d'un projet. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Activer/désactiver les conseils d'incrustation pour les valeurs des membres dans les déclarations d'énumération 
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	"javascript.inlayHints.enumMemberValues.enabled": false,

	// Activer/désactiver les conseils d'incrustation pour les types de retour implicites sur les signatures de fonctions 
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Activer/désactiver les indicateurs de Inlay pour les noms de paramètres :
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	//  - none: Désactiver les indicateurs de nom de paramètre.
	//  - literals: Active les indicateurs de noms de paramètres uniquement pour les arguments littéraux.
	//  - all: Active les indicateurs de noms de paramètres pour les arguments littéraux et non littéraux.
	"javascript.inlayHints.parameterNames.enabled": "none",

	// Supprime les indicateurs de nom de paramètre sur les arguments dont le texte est identique au nom du paramètre.
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Activer/désactiver les conseils d'incrustation pour les types de paramètres implicites :
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Il faut utiliser TypeScript 4.4+ dans l'espace de travail.
	"javascript.inlayHints.parameterTypes.enabled": false,

	// Activer/désactiver les conseils d’incrustation pour les types implicites dans les déclarations de propriété :
	// ```typescript
	// 
	// classe Foo {
	// 	prop/* :number */= Date.now;
	// }
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Activer/désactiver les conseils d'incrustation pour les types de variables implicites 
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	"javascript.inlayHints.variableTypes.enabled": false,

	// Style de chemin préféré pour les importations automatiques.
	//  - shortest: Préfère une importation non relative uniquement si celle-ci comporte moins de segments de chemin qu'une importation relative.
	//  - relative: Préfère un chemin relatif par rapport à l'emplacement du fichier importé.
	//  - non-relative: Préfère une importation non relative basée sur le 'baseUrl' ou les 'paths' configurés dans votre 'jsconfig.json' / 'tsconfig.json'.
	//  - project-relative: Préfère une importation non relative uniquement si le chemin d'importation relatif omet le répertoire du package ou du projet. Nécessite l'utilisation de TypeScript 4.2+ dans l'espace de travail.
	"javascript.preferences.importModuleSpecifier": "shortest",

	// Fin de chemin par défaut des importations automatiques.
	//  - auto: Utilisez les paramètres de projet pour sélectionner une valeur par défaut.
	//  - minimal: Raccourcissez './component/index.js' en './component'.
	//  - index: Raccourcissez './component/index.js' en './component/index'.
	//  - js: Ne pas raccourcir les terminaisons de chemin; inclure l’extension '.js'.
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// Style de guillemet par défaut à utiliser pour les corrections rapides : 'single' pour les guillemets simples, 'double' pour les guillemets doubles ou 'auto' pour déduire le type de guillemet à partir des importations existantes.
	"javascript.preferences.quoteStyle": "auto",

	// Le paramètre 'typescript.preferences.renameShorthandProperties' a été déprécié au profit de 'typescript.preferences.useAliasesForRenames'
	// Activez/désactivez l'introduction d'alias pour les propriétés de raccourci d'objet durant les renommages. Nécessite l'utilisation de TypeScript 3.4 (ou version ultérieure) dans l'espace de travail.
	"javascript.preferences.renameShorthandProperties": true,

	// Activez/désactivez l'introduction d'alias pour les propriétés de raccourci d'objet durant les renommages. Nécessite l'utilisation de TypeScript 3.4 (ou version ultérieure) dans l'espace de travail.
	"javascript.preferences.useAliasesForRenames": true,

	// Activez/désactivez les références CodeLens dans les fichiers JavaScript.
	"javascript.referencesCodeLens.enabled": false,

	// Activez/désactivez les références CodeLens sur toutes les fonctions des fichiers JavaScript.
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// Active/désactive les suggestions d'importation automatique.
	"javascript.suggest.autoImports": true,

	// Fonctions complètes avec leur signature de paramètre.
	"javascript.suggest.completeFunctionCalls": false,

	// Activez/désactivez la suggestion pour commenter JSDoc.
	"javascript.suggest.completeJSDocs": true,

	// Activer/désactiver les suggestions d'autocomplétion.
	"javascript.suggest.enabled": true,

	// Activez/désactivez l'affichage des complétions sur des valeurs potentiellement indéfinies qui insèrent un appel de chaîne facultatif. Nécessite TS 3.7+ et l'activation des vérifications de valeur null stricte.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Active/désactive les complétions basées sur l'importation automatique pour les instructions d'importation partiellement tapées. Nécessite l'utilisation de TypeScript 4.3+ dans l'espace de travail.
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// Activez/désactivez la génération d'annotations '@return' pour les modèles JSDoc. Nécessite l'utilisation de TypeScript 4.2+ dans l'espace de travail.
	"javascript.suggest.jsdoc.generateReturns": true,

	// Activez/désactivez l'inclusion de noms uniques à partir du fichier dans les suggestions JavaScript. Notez que les suggestions de nom sont toujours désactivées dans le code JavaScript qui fait l'objet d'une vérification sémantique à l'aide de '@ts-check' ou 'checkJs'.
	"javascript.suggest.names": true,

	// Activer/désactiver des suggestions pour les chemins dans les instructions d'import et les appels require.
	"javascript.suggest.paths": true,

	// Active/désactive les diagnostics de suggestion pour les fichiers JavaScript dans l'éditeur.
	"javascript.suggestionActions.enabled": true,

	// Active/désactive la mise à jour automatique des chemins d’importation quand vous renommez ou déplacez un fichier dans VS Code.
	//  - prompt: Demander à chaque renommage.
	//  - always: Toujours mettre à jour les chemins automatiquement.
	//  - never: Ne jamais renommer les chemins et ne pas demander.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// Activez/désactivez la validation JavaScript.
	"javascript.validate.enable": true,

	// Active/désactive la vérification sémantique des fichiers JavaScript. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.
	"js/ts.implicitProjectConfig.checkJs": false,

	// Active/désactive 'experimentalDecorators' dans les fichiers JavaScript qui ne font pas partie d'un projet. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// Active/désactive les [types de fonction stricts](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) dans les fichiers JavaScript et TypeScript qui ne font pas partie d'un projet. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// Active/désactive les [vérifications de valeur null strictes](https://www.typescriptlang.org/tsconfig#strictNullChecks) dans les fichiers JavaScript et TypeScript qui ne font pas partie d'un projet. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.
	"js/ts.implicitProjectConfig.strictNullChecks": false,

	// Active/désactive la fermeture automatique des balises JSX.
	"typescript.autoClosingTags": true,

	// Vérifiez si npm est installé pour l’[acquisition automatique de type] (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.check.npmIsInstalled": true,

	// Désactive l’[acquisition automatique de type](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). L’acquisition automatique de type récupère les packages `@types` par le biais de npm afin d’améliorer IntelliSense pour les bibliothèques externes.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Permet d'inviter les utilisateurs à se servir de la version TypeScript configurée dans l'espace de travail pour IntelliSense.
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// Activez/désactivez le formateur TypeScript par défaut.
	"typescript.format.enable": true,

	// Définit le traitement des espaces après une virgule de délimitation.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// Définit le traitement des espaces après le mot clé du constructeur.
	"typescript.format.insertSpaceAfterConstructor": false,

	// Définit le traitement des espaces après le mot clé function pour les fonctions anonymes.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Définit la gestion des espaces après les mots clés dans une instruction de flux de contrôle.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Définit le traitement des espaces après l'ouverture et avant la fermeture d'accolades vides.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades d'expression JSX.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades non vides.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Définit l’espace après ouverture et avant la fermeture de crochets non vides.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Définit l’espace après ouverture et avant la fermeture de parenthèses non vides.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades de chaîne de modèle.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	//  Définit le traitement des espaces après un point-virgule dans une instruction for.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Définit le traitement des espaces après les assertions de type dans TypeScript.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// Définit le traitement des espaces après un opérateur binaire.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Définit le traitement des espaces avant les parenthèses d'arguments de la fonction.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Définit si une accolade ouvrante dans un bloc de contrôle est placée ou non sur une nouvelle ligne.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Définit si une accolade ouvrante dans une fonction est placée ou non sur une nouvelle ligne.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Définit la gestion des points-virgules facultatifs. Nécessite l'utilisation de TypeScript 3.7 ou plus récent dans l'espace de travail.
	//  - ignore: N'insérez ou n'enlevez aucun point-virgule.
	//  - insert: Insérez des points-virgules à la fin des instructions.
	//  - remove: Supprimez les points-virgules inutiles.
	"typescript.format.semicolons": "ignore",

	// Activer/désactiver les implémentations CodeLens. Ce CodeLens affiche l'implémenteur d’une interface.
	"typescript.implementationsCodeLens.enabled": false,

	// Activer/désactiver les conseils d'incrustation pour les valeurs des membres dans les déclarations d'énumération 
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// Activer/désactiver les conseils d'incrustation pour les types de retour implicites sur les signatures de fonctions 
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Activer/désactiver les indicateurs de Inlay pour les noms de paramètres :
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	//  - none: Désactiver les indicateurs de nom de paramètre.
	//  - literals: Active les indicateurs de noms de paramètres uniquement pour les arguments littéraux.
	//  - all: Active les indicateurs de noms de paramètres pour les arguments littéraux et non littéraux.
	"typescript.inlayHints.parameterNames.enabled": "none",

	// Supprime les indicateurs de nom de paramètre sur les arguments dont le texte est identique au nom du paramètre.
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Activer/désactiver les conseils d'incrustation pour les types de paramètres implicites :
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Il faut utiliser TypeScript 4.4+ dans l'espace de travail.
	"typescript.inlayHints.parameterTypes.enabled": false,

	// Activer/désactiver les conseils d’incrustation pour les types implicites dans les déclarations de propriété :
	// ```typescript
	// 
	// classe Foo {
	// 	prop/* :number */= Date.now;
	// }
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Activer/désactiver les conseils d'incrustation pour les types de variables implicites 
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Nécessite l’utilisation de la machine à écrire 4.4 + dans l’espace de travail.
	"typescript.inlayHints.variableTypes.enabled": false,

	// Définit les paramètres régionaux utilisé pour signaler les erreurs JavaScript et TypeScript. La valeur par défaut `null` utilise les paramètres régionaux de VS Code.
	"typescript.locale": null,

	// Indique le chemin d’accès à l’exécutable npm utilisé pour l’[acquisition automatique de type] (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.npm": null,

	// Style de chemin préféré pour les importations automatiques.
	//  - shortest: Préfère une importation non relative uniquement si celle-ci comporte moins de segments de chemin qu'une importation relative.
	//  - relative: Préfère un chemin relatif par rapport à l'emplacement du fichier importé.
	//  - non-relative: Préfère une importation non relative basée sur le 'baseUrl' ou les 'paths' configurés dans votre 'jsconfig.json' / 'tsconfig.json'.
	//  - project-relative: Préfère une importation non relative uniquement si le chemin d'importation relatif omet le répertoire du package ou du projet. Nécessite l'utilisation de TypeScript 4.2+ dans l'espace de travail.
	"typescript.preferences.importModuleSpecifier": "shortest",

	// Fin de chemin par défaut des importations automatiques.
	//  - auto: Utilisez les paramètres de projet pour sélectionner une valeur par défaut.
	//  - minimal: Raccourcissez './component/index.js' en './component'.
	//  - index: Raccourcissez './component/index.js' en './component/index'.
	//  - js: Ne pas raccourcir les terminaisons de chemin; inclure l’extension '.js'.
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// Activer/désactiver la recherche dans les dépendances 'package.json' pour les importations automatiques disponibles.
	//  - auto: Rechercher dans les dépendances en fonction de l'impact estimé des performances.
	//  - on: Toujours rechercher dans les dépendances.
	//  - off: Ne jamais rechercher dans les dépendances.
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// Style de guillemet par défaut à utiliser pour les corrections rapides : 'single' pour les guillemets simples, 'double' pour les guillemets doubles ou 'auto' pour déduire le type de guillemet à partir des importations existantes.
	"typescript.preferences.quoteStyle": "auto",

	// Le paramètre 'typescript.preferences.renameShorthandProperties' a été déprécié au profit de 'typescript.preferences.useAliasesForRenames'
	// Activez/désactivez l'introduction d'alias pour les propriétés de raccourci d'objet durant les renommages. Nécessite l'utilisation de TypeScript 3.4 (ou version ultérieure) dans l'espace de travail.
	"typescript.preferences.renameShorthandProperties": true,

	// Activez/désactivez l'introduction d'alias pour les propriétés de raccourci d'objet durant les renommages. Nécessite l'utilisation de TypeScript 3.4 (ou version ultérieure) dans l'espace de travail.
	"typescript.preferences.useAliasesForRenames": true,

	// Activez/désactivez les références CodeLens dans les fichiers TypeScript.
	"typescript.referencesCodeLens.enabled": false,

	// Activez/désactivez les références CodeLens sur toutes les fonctions des fichiers TypeScript.
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// Rapporter les vérifications de style en tant qu’avertissements.
	"typescript.reportStyleChecksAsWarnings": true,

	// Active/désactive les suggestions d'importation automatique.
	"typescript.suggest.autoImports": true,

	// Fonctions complètes avec leur signature de paramètre.
	"typescript.suggest.completeFunctionCalls": false,

	// Activez/désactivez la suggestion pour commenter JSDoc.
	"typescript.suggest.completeJSDocs": true,

	// Activer/désactiver les suggestions d'autocomplétion.
	"typescript.suggest.enabled": true,

	// Activez/désactivez l'affichage des complétions sur des valeurs potentiellement indéfinies qui insèrent un appel de chaîne facultatif. Nécessite TS 3.7+ et l'activation des vérifications de valeur null stricte.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Active/désactive les complétions basées sur l'importation automatique pour les instructions d'importation partiellement tapées. Nécessite l'utilisation de TypeScript 4.3+ dans l'espace de travail.
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// Active/désactive les complétions d'extraits à partir de TS Server. Nécessite l'utilisation de TypeScript 4.3+ dans l'espace de travail.
	"typescript.suggest.includeCompletionsWithSnippetText": true,

	// Activez/désactivez la génération d'annotations '@return' pour les modèles JSDoc. Nécessite l'utilisation de TypeScript 4.2+ dans l'espace de travail.
	"typescript.suggest.jsdoc.generateReturns": true,

	// Activer/désactiver des suggestions pour les chemins dans les instructions d'import et les appels require.
	"typescript.suggest.paths": true,

	// Active/désactive les diagnostics de suggestion pour les fichiers TypeScript dans l'éditeur.
	"typescript.suggestionActions.enabled": true,

	// Activer/désactiver des enquêtes ponctuelles qui nous aident à améliorer le support JavaScript et TypeScript de VS Code.
	"typescript.surveys.enabled": true,

	// Contrôle la détection automatique des tâches tsc.
	//  - on: Créer les tâches build et watch.
	//  - off: Désactivez cette fonctionnalité.
	//  - build: Créer uniquement des tâches de compilation à exécution unique.
	//  - watch: Créer uniquement des tâches compile et watch.
	"typescript.tsc.autoDetect": "on",

	// Indique le chemin de dossier des fichiers tsserver et `lib*.d.ts` dans une installation de TypeScript à utiliser pour IntelliSense. Exemple : `./node_modules/typescript/lib`.
	// 
	// - Si elle est spécifiée sous forme de paramètre utilisateur, la version de TypeScript dans `typescript.tsdk` remplace automatiquement la version de TypeScript intégrée.
	// - Si elle est spécifiée sous forme de paramètre d’espace de travail, `typescript.tsdk` vous permet d’utiliser cette version d’espace de travail de TypeScript pour IntelliSense avec la commande `TypeScript: Select TypeScript version`.
	// 
	// Consultez la [documentation de TypeScript](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) pour plus d’informations sur la gestion des versions de TypeScript.
	"typescript.tsdk": null,

	// Active le traçage des performances du serveur TS dans un répertoire. Ces fichiers de trace permettent de diagnostiquer les problèmes de performances du serveur TS. Le journal peut contenir des chemins de fichiers, du code source et d'autres informations potentiellement sensibles de votre projet.
	"typescript.tsserver.enableTracing": false,

	// (Expérimental) Permet de signaler les erreurs à l'échelle du projet.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// Active la journalisation du serveur TS dans un fichier. Ce journal peut être utilisé pour diagnostiquer les problèmes du serveur TS. Il peut contenir des chemins de fichier, du code source et d'autres informations potentiellement sensibles de votre projet.
	"typescript.tsserver.log": "off",

	// Quantité maximale de mémoire (en Mo) à allouer au processus du serveur TypeScript.
	"typescript.tsserver.maxTsServerMemory": 3072,

	// Chemins supplémentaires pour découvrir les plug-ins Service de langage Typescript.
	"typescript.tsserver.pluginPaths": [],

	// Active le traçage des messages envoyés au serveur TS. Cette trace peut être utilisée pour diagnostiquer les problèmes du serveur TS. Elle peut contenir des chemins de fichier, du code source et d'autres informations potentiellement sensibles de votre projet.
	"typescript.tsserver.trace": "off",

	// Activez/désactivez la génération dynamique d'un serveur TypeScript distinct capable de répondre plus rapidement aux opérations de syntaxe, comme le calcul du pliage ou le calcul des symboles de document. Nécessite l'utilisation de TypeScript 3.4.0 ou supérieur dans l'espace de travail.
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// Configurez les stratégies de surveillance qui doivent être utilisées pour effectuer le suivi des fichiers et répertoires. Nécessite l'utilisation de TypeScript 3.8+ dans l'espace de travail.
	"typescript.tsserver.watchOptions": {},

	// Active/désactive la mise à jour automatique des chemins d’importation quand vous renommez ou déplacez un fichier dans VS Code.
	//  - prompt: Demander à chaque renommage.
	//  - always: Toujours mettre à jour les chemins automatiquement.
	//  - never: Ne jamais renommer les chemins et ne pas demander.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// Activez/désactivez la validation TypeScript.
	"typescript.validate.enable": true,

	// Détermine quels sont les fichiers recherchés par [atteindre le symbole dans l'espace de travail](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
	//  - allOpenProjects: Recherche des symboles dans tous les projets JavaScript ou TypeScript ouverts. Nécessite l'utilisation de TypeScript 3.9 (ou version ultérieure) dans l'espace de travail.
	//  - currentProject: Recherche uniquement les symboles dans le projet JavaScript ou TypeScript actif.
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// Configure le déclenchement de l'ouverture automatique de la vue d'aperçu d'erreur.
	//  - failureAnywhere: L'ouverture automatique s'effectue, quel que soit l'emplacement de l'échec.
	//  - failureInVisibleDocument: L'ouverture automatique s'effectue en cas d'échec d'un test dans un document visible.
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// Contrôle si la vue d'aperçu doit s'ouvrir automatiquement en mode d'exécution automatique.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// Délai d'attente, en millisecondes, après le marquage d'un test comme étant obsolète et le démarrage d'une nouvelle exécution.
	"testing.autoRun.delay": 1000,

	// Contrôle les tests exécutés automatiquement.
	//  - all: Exécute automatiquement tous les tests découverts quand l'exécution automatique est activée. Réexécute les tests individuels quand ils changent.
	//  - rerun: Réexécute les tests individuels quand ils changent. N'exécute pas automatiquement les tests qui n'ont pas déjà été exécutés.
	"testing.autoRun.mode": "all",

	// Contrôle l’action à prendre lorsque vous cliquez avec le bouton gauche sur une décoration de test dans la reliure.
	//  - run: Exécutez le test.
	//  - debug: Déboguer le test.
	//  - contextMenu: Ouvrez le menu contextuel pour obtenir plus d’options.
	"testing.defaultGutterClickAction": "run",

	// Contrôle si le test en cours d’exécution doit être suivi dans l’affichage de l’explorateur de tests
	"testing.followRunningTest": true,

	// Insère un point-virgule à la fin de la ligne au moment de la complétion des propriétés CSS.
	"css.completion.completePropertyWithSemicolon": true,

	// Par défaut, VS Code déclenche la complétion de la valeur de propriété après la sélection d'une propriété CSS. Utilisez ce paramètre pour désactiver ce comportement.
	"css.completion.triggerPropertyValueCompletion": true,

	// Liste de chemins d’accès relatifs vers des fichiers JSON respectant le [format de données personnalisé](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code charge des données personnalisées au démarrage pour améliorer la prise en charge de CSS : les propriétés, directives @, pseudo-classes et pseudo-éléments CSS personnalisés que vous spécifiez dans les fichiers JSON.
	// 
	// Les chemins de fichiers sont relatifs à l’espace de travail, et seuls les paramètres de dossier d’espace de travail sont pris en compte.
	"css.customData": [],

	// Affiche la documentation relative aux balises et aux attributs CSS quand le curseur pointe dessus.
	"css.hover.documentation": true,

	// Affiche les références MDN pour CSS en cas de pointage du curseur.
	"css.hover.references": true,

	// Nombre de paramètres non valide.
	"css.lint.argumentsInColorFunction": "error",

	// Ne pas utiliser `width` ou `height` lorsque vous utilisez `padding` ou `border`.
	"css.lint.boxModel": "ignore",

	// Quand vous utilisez un préfixe spécifique au fournisseur assurez-vous d’inclure toutes les autres propriétés spécifiques au fournisseur.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Ne pas utiliser les définitions de style en doublon.
	"css.lint.duplicateProperties": "ignore",

	// Ne pas utiliser d'ensembles de règles vides
	"css.lint.emptyRules": "warning",

	// Évitez d’utiliser `float`. Les floats conduisent à un CSS fragile qui est facile à casser, si un des aspects de la mise en page change.
	"css.lint.float": "ignore",

	// La règle '@font-face' doit définir les propriétés 'src' et 'font-family'.
	"css.lint.fontFaceProperties": "warning",

	// Les couleurs hexadécimales doivent contenir trois ou six chiffres hexadécimaux.
	"css.lint.hexColorLength": "error",

	// Les sélecteurs ne doivent pas contenir d'ID, car ces règles sont trop fortement couplées au code HTML.
	"css.lint.idSelector": "ignore",

	// Les hacks IE sont uniquement nécessaires pour prendre en charge IE7 et antérieur.
	"css.lint.ieHack": "ignore",

	// Evitez d'utiliser `!important`. Cela indique que la spécificité de l'intégralité du code CSS est incorrecte et qu'il doit être refactorisé.
	"css.lint.important": "ignore",

	// Les instructions Import ne se chargent pas en parallèle.
	"css.lint.importStatement": "ignore",

	// La propriété est ignorée en raison du display. Par exemple, avec 'display: inline', les propriétés `width`, `height`, `margin-top`, `margin-bottom`, et `float` n’ont aucun effet.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// Le sélecteur universel (`*`) est connu pour être lent.
	"css.lint.universalSelector": "ignore",

	// Règle-at inconnue.
	"css.lint.unknownAtRules": "warning",

	// Propriété inconnue.
	"css.lint.unknownProperties": "warning",

	// Propriété spécifique à un fournisseur inconnue.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// Liste de propriétés non validées par la règle 'unknownProperties'.
	"css.lint.validProperties": [],

	// Quand vous utilisez un préfixe spécifique au fournisseur, incluez également la propriété standard.
	"css.lint.vendorPrefix": "warning",

	// Aucune unité nécessaire pour zéro.
	"css.lint.zeroUnits": "ignore",

	// Trace la communication entre VS Code et le serveur de langage CSS.
	"css.trace.server": "off",

	// Active ou désactive toutes les validations
	"css.validate": true,

	// Insère un point-virgule à la fin de la ligne au moment de la complétion des propriétés CSS.
	"less.completion.completePropertyWithSemicolon": true,

	// Par défaut, VS Code déclenche la complétion de la valeur de propriété après la sélection d'une propriété CSS. Utilisez ce paramètre pour désactiver ce comportement.
	"less.completion.triggerPropertyValueCompletion": true,

	// Affiche la documentation relative aux balises et aux attributs LESS quand le curseur pointe dessus.
	"less.hover.documentation": true,

	// Affiche les références MDN pour LESS en cas de pointage du curseur.
	"less.hover.references": true,

	// Nombre de paramètres non valide.
	"less.lint.argumentsInColorFunction": "error",

	// Ne pas utiliser `width` ou `height` lorsque vous utilisez `padding` ou `border`.
	"less.lint.boxModel": "ignore",

	// Quand vous utilisez un préfixe spécifique au fournisseur assurez-vous d’inclure toutes les autres propriétés spécifiques au fournisseur.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Ne pas utiliser les définitions de style en doublon.
	"less.lint.duplicateProperties": "ignore",

	// Ne pas utiliser d'ensembles de règles vides
	"less.lint.emptyRules": "warning",

	// Évitez d’utiliser `float`. Les floats conduisent à un CSS fragile qui est facile à casser, si un des aspects de la mise en page change.
	"less.lint.float": "ignore",

	// La règle '@font-face' doit définir les propriétés 'src' et 'font-family'.
	"less.lint.fontFaceProperties": "warning",

	// Les couleurs hexadécimales doivent contenir trois ou six chiffres hexadécimaux.
	"less.lint.hexColorLength": "error",

	// Les sélecteurs ne doivent pas contenir d'ID, car ces règles sont trop fortement couplées au code HTML.
	"less.lint.idSelector": "ignore",

	// Les hacks IE sont uniquement nécessaires pour prendre en charge IE7 et antérieur.
	"less.lint.ieHack": "ignore",

	// Evitez d'utiliser `!important`. Cela indique que la spécificité de l'intégralité du code CSS est incorrecte et qu'il doit être refactorisé.
	"less.lint.important": "ignore",

	// Les instructions Import ne se chargent pas en parallèle.
	"less.lint.importStatement": "ignore",

	// La propriété est ignorée en raison du display. Par exemple, avec 'display: inline', les propriétés `width`, `height`, `margin-top`, `margin-bottom`, et `float` n’ont aucun effet.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// Le sélecteur universel (`*`) est connu pour être lent.
	"less.lint.universalSelector": "ignore",

	// Règle-at inconnue.
	"less.lint.unknownAtRules": "warning",

	// Propriété inconnue.
	"less.lint.unknownProperties": "warning",

	// Propriété spécifique à un fournisseur inconnue.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// Liste de propriétés non validées par la règle 'unknownProperties'.
	"less.lint.validProperties": [],

	// Quand vous utilisez un préfixe spécifique au fournisseur, incluez également la propriété standard.
	"less.lint.vendorPrefix": "warning",

	// Aucune unité nécessaire pour zéro.
	"less.lint.zeroUnits": "ignore",

	// Active ou désactive toutes les validations
	"less.validate": true,

	// Insère un point-virgule à la fin de la ligne au moment de la complétion des propriétés CSS.
	"scss.completion.completePropertyWithSemicolon": true,

	// Par défaut, VS Code déclenche la complétion de la valeur de propriété après la sélection d'une propriété CSS. Utilisez ce paramètre pour désactiver ce comportement.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Affiche la documentation relative aux balises et aux attributs SCSS quand le curseur pointe dessus.
	"scss.hover.documentation": true,

	// Affiche les références MDN pour SCSS en cas de pointage du curseur.
	"scss.hover.references": true,

	// Nombre de paramètres non valide.
	"scss.lint.argumentsInColorFunction": "error",

	// Ne pas utiliser `width` ou `height` lorsque vous utilisez `padding` ou `border`.
	"scss.lint.boxModel": "ignore",

	// Quand vous utilisez un préfixe spécifique au fournisseur assurez-vous d’inclure toutes les autres propriétés spécifiques au fournisseur.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Ne pas utiliser les définitions de style en doublon.
	"scss.lint.duplicateProperties": "ignore",

	// Ne pas utiliser d'ensembles de règles vides
	"scss.lint.emptyRules": "warning",

	// Évitez d’utiliser `float`. Les floats conduisent à un CSS fragile qui est facile à casser, si un des aspects de la mise en page change.
	"scss.lint.float": "ignore",

	// La règle '@font-face' doit définir les propriétés 'src' et 'font-family'.
	"scss.lint.fontFaceProperties": "warning",

	// Les couleurs hexadécimales doivent contenir trois ou six chiffres hexadécimaux.
	"scss.lint.hexColorLength": "error",

	// Les sélecteurs ne doivent pas contenir d'ID, car ces règles sont trop fortement couplées au code HTML.
	"scss.lint.idSelector": "ignore",

	// Les hacks IE sont uniquement nécessaires pour prendre en charge IE7 et antérieur.
	"scss.lint.ieHack": "ignore",

	// Evitez d'utiliser `!important`. Cela indique que la spécificité de l'intégralité du code CSS est incorrecte et qu'il doit être refactorisé.
	"scss.lint.important": "ignore",

	// Les instructions Import ne se chargent pas en parallèle.
	"scss.lint.importStatement": "ignore",

	// La propriété est ignorée en raison du display. Par exemple, avec 'display: inline', les propriétés `width`, `height`, `margin-top`, `margin-bottom`, et `float` n’ont aucun effet.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// Le sélecteur universel (`*`) est connu pour être lent.
	"scss.lint.universalSelector": "ignore",

	// Règle-at inconnue.
	"scss.lint.unknownAtRules": "warning",

	// Propriété inconnue.
	"scss.lint.unknownProperties": "warning",

	// Propriété spécifique à un fournisseur inconnue.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// Liste de propriétés non validées par la règle 'unknownProperties'.
	"scss.lint.validProperties": [],

	// Quand vous utilisez un préfixe spécifique au fournisseur, incluez également la propriété standard.
	"scss.lint.vendorPrefix": "warning",

	// Aucune unité nécessaire pour zéro.
	"scss.lint.zeroUnits": "ignore",

	// Active ou désactive toutes les validations
	"scss.validate": true,

	// Lorsqu’activé, vérifie automatiquement les extensions pour les mises à jour. Si une extension est une mise à jour, elle est marquée comme obsolète dans l’affichage des Extensions. Les mises à jour sont récupérées à partir d’un service en ligne de Microsoft.
	"extensions.autoCheckUpdates": true,

	// Contrôle le comportement de mise à jour automatique des extensions. Les mises à jour sont récupérées à partir d'un service en ligne Microsoft.
	//  - true: Télécharge et installe automatiquement les mises à jour pour toutes les extensions.
	//  - onlyEnabledExtensions: Télécharge et installe automatiquement les mises à jour uniquement pour les extensions activées. Les extensions désactivées ne sont pas mises à jour automatiquement.
	//  - false: Les extensions ne sont pas mises à jour automatiquement.
	"extensions.autoUpdate": true,

	// Si cette option est activée, les éditeurs avec les détails d'extension sont automatiquement fermés quand vous quittez l'affichage Extensions.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// Si une extension est listée ici, aucune invite de confirmation n'est affichée quand cette extension gère un URI.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// Si cette option est activée, les notifications pour les recommandations d’extension ne sont pas affichées.
	"extensions.ignoreRecommendations": false,

	// Ce paramètre est déprécié. Utilisez le paramètre extensions.ignoreRecommendations pour contrôler les notifications de recommandation. Utilisez les actions de visibilité de la vue Extensions pour masquer la vue recommandée par défaut.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// Remplacez la prise en charge d’une extension par un espace de travail non approuvé. Les extensions utilisant la valeur `true` sont toujours activées. Les extensions utilisant la valeur `limited` sont toujours activées et l’extension masquera les fonctionnalités nécessitant une approbation. Les extensions utilisant la valeur `false` ne sont activées que dans un espace de travail approuvé.
	"extensions.supportUntrustedWorkspaces": {},

	// Remplacez la prise en charge d’une extension par les espaces de travail virtuels.
	"extensions.supportVirtualWorkspaces": {
		"pub.name": false
	},

	// Activez l'hôte d'extension Web Worker.
	"extensions.webWorker": false,

	// Activez/désactivez la possibilité du défilement intelligent dans la vue de sortie. Le défilement intelligent vous permet de verrouiller automatiquement le défilement quand vous cliquez dans la vue de sortie. Il se déverrouille quand vous cliquez sur la dernière ligne.
	"output.smartScroll.enabled": true,

	// Liste des extensions à ignorer lors de la synchronisation. L'identificateur d'une extension est toujours '${publisher}.${name}'. Par exemple : 'vscode.csharp'.
	"settingsSync.ignoredExtensions": [],

	// Configurez les paramètres à ignorer pendant la synchronisation.
	"settingsSync.ignoredSettings": [],

	// Synchronisez les combinaisons de touches pour chaque plateforme.
	"settingsSync.keybindingsPerPlatform": true,

	// Quand la fonctionnalité est activée dans le notebook, les barres de navigation contiennent des cellules de code.
	"notebook.breadcrumbs.showCodeCells": true,

	// Contrôler s’il faut afficher l’indicateur de focus sous forme de bordure de cellule ou de barre de surbrillance dans la marge gauche
	"notebook.cellFocusIndicator": "gutter",

	// Indique si la barre d'outils de la cellule doit être affichée, ou si elle doit être masquée.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// Indique si la barre d’outils de la cellule doit apparaître au survol de la souris ou au clic.
	"notebook.cellToolbarVisibility": "click",

	// Détermine si l’éditeur de blocs-notes doit être rendu dans un format compact. 
	"notebook.compactView": true,

	// Contrôle si les actions de sortie doivent être rendues dans la barre d’outils de sortie.
	"notebook.consolidatedOutputButton": true,

	// Contrôle si des actions supplémentaires sont affichées dans une liste déroulante à côté du bouton Exécuter.
	"notebook.consolidatedRunButton": false,

	// Indique s'il est nécessaire d'utiliser l'éditeur de différences de texte pour le notebook.
	"notebook.diff.enablePreview": true,

	// Masquer les différences de métadonnées
	"notebook.diff.ignoreMetadata": false,

	// Masquer les différences de sorties
	"notebook.diff.ignoreOutputs": false,

	// Liste de priorités des types mime de sortie
	"notebook.displayOrder": [],

	// Détermine si l’éditeur de blocs-notes doit autoriser les cellules à déplacer des cellules par glisser-déplacer.
	"notebook.dragAndDropEnabled": true,

	// Paramètres des éditeurs de code utilisés dans les blocs-notes. Ils peuvent être utilisés pour personnaliser la plupart des paramètres editor.*.
	"notebook.editorOptionsCustomizations": {},

	// Détermine si une barre d’outils globale doit être rendue dans l’éditeur de blocs-notes.
	"notebook.globalToolbar": true,

	// Contrôle si les actions de la barre d’outils du bloc-notes doivent afficher l’étiquette ou non.
	"notebook.globalToolbarShowLabel": true,

	// Contrôlez l’emplacement d’affichage des actions de cellule d’insertion.
	//  - betweenCells: Barre d’outils qui apparaît lors du pointage entre les cellules.
	//  - notebookToolbar: Barre d’outils en haut de l’éditeur de blocs-notes.
	//  - both: Les deux barres d’outils.
	//  - hidden: Les actions d’insertion n’apparaissent nulle part.
	"notebook.insertToolbarLocation": "both",

	// Contrôle l’affichage des numéros de ligne dans l’éditeur de cellule.
	"notebook.lineNumbers": "off",

	// Lorsque cette option est activée, le curseur peut accéder à la cellule suivante/précédente lorsque le curseur actuel de l’éditeur de cellules se trouve à la première/dernière ligne.
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// Quand la fonctionnalité de contour est activée dans le notebook, elle permet d'afficher les cellules de code.
	"notebook.outline.showCodeCells": false,

	// Contrôlez le nombre de lignes de texte qui sont rendues dans une sortie texte.
	"notebook.output.textLineLimit": 30,

	// Indique si la barre d'état de la cellule doit être affichée.
	//  - hidden: La barre d’état de la cellule est toujours masquée.
	//  - visible: La barre d’état de la cellule est toujours visible.
	//  - visibleAfterExecute: La barre d’état de la cellule est masquée jusqu’à ce que la cellule soit exécutée. Ensuite, elle devient visible et affiche l’état d’exécution.
	"notebook.showCellStatusBar": "visible",

	// Contrôle l’affichage de la Flèche de pliage de l’en-tête de démarque.
	//  - always: Les contrôles de pliage sont toujours visibles.
	//  - mouseover: Les contrôles de pliage sont visibles uniquement lors du basculement de souris.
	"notebook.showFoldingControls": "mouseover",

	// Indique si une pile d’annulation/rétablissement distincte doit exister pour chaque cellule.
	"notebook.undoRedoPerCell": true,

	// Contrôle l'application de 'provideTasks' pour toutes les extensions du fournisseur de tâches. Si la commande Tâches : Exécuter la tâche est lente, la désactivation de la détection automatique des fournisseurs de tâches peut être utile. Les extensions individuelles peuvent également fournir des paramètres qui désactivent la détection automatique.
	"task.autoDetect": "on",

	// Configure s'il faut afficher l'invite du détecteur de problèmes de correspondance pendant l'exécution d'une tâche. Définissez le paramètre sur 'true' pour ne jamais afficher d'invite ou utilisez un dictionnaire de types de tâche pour désactiver les invites seulement pour des types de tâches spécifiques.
	"task.problemMatchers.neverPrompt": false,

	// Détermine si le détail de la tâche doit être affiché pour les tâches qui comportent un détail dans les sélections rapides de tâches, par exemple Exécuter la tâche.
	"task.quickOpen.detail": true,

	// Contrôle le nombre d'éléments récents suivis dans la boîte de dialogue d'ouverture rapide de tâche.
	"task.quickOpen.history": 30,

	// Force la commande Tâches : exécuter la tâche à utiliser le comportement "tout afficher" (plus lent) à la place du sélecteur à deux niveaux (plus rapide), où les tâches sont regroupées par fournisseur.
	"task.quickOpen.showAll": false,

	// Contrôle si la recherche rapide de tâche est ignorée quand il n'y a qu'une seule tâche.
	"task.quickOpen.skip": false,

	// Enregistrez tous les éditeurs comportant des modifications avant d'exécuter une tâche.
	//  - always: Enregistre toujours tous les éditeurs avant l'exécution d'une tâche.
	//  - never: N'enregistre jamais les éditeurs avant l'exécution d'une tâche.
	//  - prompt: Invite à enregistrer le contenu des éditeurs avant l'exécution d'une tâche.
	"task.saveBeforeRun": "always",

	// Configure si un avertissement est affiché quand un fournisseur est lent
	"task.slowProviderWarning": true,

	// Personnalise le type de terminal à lancer.
	//  - integrated: Utiliser le terminal intégré de VS Code.
	//  - external: Utiliser le terminal externe configuré.
	"terminal.explorerKind": "integrated",

	// Personnalise le terminal à exécuter sur Linux.
	"terminal.external.linuxExec": "xterm",

	// Personnalise l’application de terminal à exécuter sur macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Personnalise le terminal à exécuter sur Windows.
	"terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

	// Indique si les combinaisons de touches avec pression simultanée doivent être autorisées dans le terminal. Quand la valeur est true et que la frappe donne lieu à une pression simultanée, #terminal.integrated.commandsToSkipShell# est contourné. Si la valeur est false, cela vous permet d'envoyer ctrl+k vers votre interpréteur de commandes (et non VS Code).
	"terminal.integrated.allowChords": true,

	// Indique si les mnémoniques de barre de menus (par exemple alt+f) sont autorisées à déclencher l'ouverture de la barre de menus. Notez que si la valeur est true, toutes les frappes de la touche alt ignorent l'interpréteur de commandes. Cela n'a aucun effet sur macOS.
	"terminal.integrated.allowMnemonics": false,

	// Si le paramètre est activé, la combinaison Alt/Option + clic permet de repositionner le curseur d'invite sous celui de la souris quand #editor.multiCursorModifier# a la valeur 'alt' (valeur par défaut). Selon votre interpréteur de commandes, cela risque de ne pas fonctionner de manière fiable.
	"terminal.integrated.altClickMovesCursor": true,

	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.linux` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.linux": null,

	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.osx` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.osx": null,

	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.windows` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.windows": null,

	// Nombre de millisecondes d’affichage la cloche d’appel dans un onglet de terminal lors de son déclenchement.
	"terminal.integrated.bellDuration": 1000,

	// Ensemble d’ID de commandes dont les combinaisons de touches ne sont pas envoyées à l’interpréteur de commandes mais sont toujours prises en charge par VS Code. Cela permet aux combinaisons de touches qui sont normalement consommées par l’interpréteur de commandes de produire le même résultat que dans une situation où le terminal n’a pas le focus, par exemple `Ctrl+P` pour lancer Quick Open.
	// 
	// 
	// 
	// De nombreuses commandes sont ignorées par défaut. Pour remplacer une valeur par défaut et passer la combinaison de touches de cette commande à l’interpréteur de commandes, ajoutez la commande précédée du caractère `-`. Par exemple, ajoutez `-workbench.action.quickOpen` pour autoriser la combinaison `Ctrl+P` à atteindre l’interpréteur de commandes.
	// 
	// 
	// 
	// La liste suivante des commandes ignorées par défaut est tronquée quand elle est affichée dans l’éditeur de paramètres. Pour voir la liste complète, [ouvrir le JSON des paramètres par défaut](command:workbench.action.openRawDefaultSettings 'Ouvrir les paramètres par défaut (JSON)') puis recherchez la première commande dans la liste ci-dessous.
	// 
	// &nbsp;
	// 
	// Commandes ignorées par défaut´:
	// 
	// - editor.action.toggleTabFocusMode
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Détermine s'il est nécessaire de confirmer à la fermeture de la fenêtre s’il existe de sessions de terminal actives.
	//  - never: Ne jamais confirmer.
	//  - always: Confirmez toujours l’existence de terminaux.
	//  - hasChildProcesses: Confirmez s’il existe des terminaux qui ont des processus enfants.
	"terminal.integrated.confirmOnExit": "never",

	// Contrôle s’il faut confirmer la suppression des terminaux lorsqu’ils ont des processus enfants. Lorsqu’il est défini sur Éditeur, les terminaux de la zone d’éditeur sont marqués comme modifiés lorsqu’ils ont des processus enfants. Notez que la détection des processus enfants peut ne pas fonctionner correctement pour les interpréteurs de commandes tels que Git Bash qui n’exécutent pas leurs processus en tant que processus enfants de l’interpréteur de commandes.
	//  - never: Ne jamais confirmer.
	//  - editor: Confirmez si le terminal se trouve dans l’éditeur.
	//  - panel: Confirmez si le terminal se trouve dans le panneau.
	//  - always: Confirmez si le terminal est se trouve dans l’éditeur ou le panneau.
	"terminal.integrated.confirmOnKill": "editor",

	// Détermine si le texte sélectionné dans le terminal doit être copié dans le Presse-papiers.
	"terminal.integrated.copyOnSelection": false,

	// Détermine si le curseur du terminal doit clignoter.
	"terminal.integrated.cursorBlinking": false,

	// Contrôle le style du curseur du terminal.
	"terminal.integrated.cursorStyle": "block",

	// Contrôle la largeur du curseur quand '#terminal.integrated.cursorStyle#' a la valeur 'line'.
	"terminal.integrated.cursorWidth": 1,

	// Chemin explicite de lancement du terminal. Il est utilisé en tant que répertoire de travail actif du processus d'interpréteur de commandes. Cela peut être particulièrement utile dans les paramètres d'espace de travail, si le répertoire racine n'est pas un répertoire de travail actif adéquat.
	"terminal.integrated.cwd": "",

	// Contrôle l’emplacement où s’affichent les nouveaux terminaux créés.
	//  - editor: Créer des terminaux dans l’éditeur
	//  - view: Créer des terminaux dans l’affichage terminal
	"terminal.integrated.defaultLocation": "view",

	// Profil par défaut à utiliser sur Linux. Ce paramètre est ignoré si `terminal.integrated.shell.linux` ou `terminal.integrated.shellArgs.linux` sont définis.
	"terminal.integrated.defaultProfile.linux": null,

	// Profil par défaut à utiliser sur macOS. Ce paramètre est ignoré si `terminal.integrated.shell.osx` ou `terminal.integrated.shellArgs.osx` sont définis.
	//  - bash: $(terminal-bash) bash
	// - path: bash
	// - args: ['-l']
	//  - zsh: $(terminal) zsh
	// - path: zsh
	// - args: ['-l']
	//  - JavaScript Debug Terminal: $(debug) JavaScript Debug Terminal
	// - extensionIdenfifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.osx": null,

	// Profil par défaut à utiliser sur Windows. Ce paramètre est ignoré si `terminal.integrated.shell.windows` ou `terminal.integrated.shellArgs.windows` sont définis.
	"terminal.integrated.defaultProfile.windows": null,

	// Détermine s'il est nécessaire de détecter la variable d'environnement '$LANG' et de lui affecter une option conforme à UTF-8 dans la mesure où le terminal de VS Code prend uniquement en charge les données encodées au format UTF-8 provenant de l'interpréteur de commandes.
	//  - auto: Définissez la variable d'environnement '$LANG' si la variable existante est manquante, ou si elle ne finit pas par '.UTF-8'.
	//  - off: Ne définissez pas la variable d'environnement '$LANG'.
	//  - on: Définissez toujours la variable d'environnement '$LANG'.
	"terminal.integrated.detectLocale": "auto",

	// Détermine si le texte en gras dans le terminal doit toujours utiliser la variante de couleur ANSI "bright".
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// Contrôle si l’appel du terminal est activé, cet appel s’affiche sous la forme d’une cloche près du nom du terminal.
	"terminal.integrated.enableBell": false,

	// Indique si les liens de fichiers doivent être activés dans le terminal. Les liens peuvent être lents quand vous travaillez sur un lecteur réseau, car chaque lien de fichier est vérifié par rapport au système de fichiers. Le changement de cette option ne prend effet que sur les nouveaux terminaux.
	"terminal.integrated.enableFileLinks": true,

	// Permet la persistance des sessions de terminal de l'espace de travail entre les rechargements de fenêtres.
	"terminal.integrated.enablePersistentSessions": true,

	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur Linux. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.linux": {},

	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur macOS. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.osx": {},

	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur Windows. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.windows": {},

	// Indique s'il est nécessaire d'afficher l'indicateur des changements apportés à un environnement sur chaque terminal. Cet indicateur précise si des extensions ont été effectuées, ou si vous souhaitez apporter des changements à l'environnement du terminal.
	//  - off: Désactivez l'indicateur.
	//  - on: Activez l'indicateur.
	//  - warnonly: Affiche uniquement l'indicateur d'avertissement qui montre que l'environnement d'un terminal est 'obsolète'. N'affiche pas l'indicateur d'information qui montre que l'environnement d'un terminal a été modifié par une extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// Indique si les terminaux doivent être relancés automatiquement quand l'extension souhaite contribuer à son environnement et qu'aucune interaction n'a eu lieu jusqu'à maintenant.
	"terminal.integrated.environmentChangesRelaunch": true,

	// Paramètre expérimental qui vise à optimiser la détection des liens dans le terminal en améliorant le moment où ils sont détectés, et en activant le partage de la détection des liens avec l'éditeur. Pour le moment, seuls les liens web sont pris en charge.
	"terminal.integrated.experimentalLinkProvider": true,

	// Multiplicateur de vitesse de défilement quand la touche Alt est enfoncée.
	"terminal.integrated.fastScrollSensitivity": 5,

	// Contrôle la famille de polices du terminal. La valeur par défaut est '#editor.fontFamily#'.
	"terminal.integrated.fontFamily": "",

	// Contrôle la taille de police en pixels du terminal.
	"terminal.integrated.fontSize": 12,

	// Épaisseur de police à utiliser dans le terminal pour le texte qui n'est pas en gras. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"terminal.integrated.fontWeight": "normal",

	// Épaisseur de police à utiliser dans le terminal pour le texte qui est en gras. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"terminal.integrated.fontWeightBold": "bold",

	// Contrôle si le terminal utilise le GPU pour son affichage.
	//  - auto: Laisse VS Code détecter le renderer qui offre la meilleure expérience.
	//  - on: Active l'accélération GPU dans le terminal.
	//  - off: Désactive l'accélération GPU dans le terminal.
	//  - canvas: Utilisez le convertisseur de canevas de secours dans le terminal. Cela utilise un contexte 2D à la place de WebGL et peut être préférable sur certains systèmes.
	"terminal.integrated.gpuAcceleration": "auto",

	// Indique si les nouveaux interpréteurs de commandes doivent hériter leur environnement de VS Code, qui peut sourcer un interpréteur de connexion pour garantir l’initialisation de $PATH et d’autres variables de développement. Cela n’a aucun effet sur Windows.
	"terminal.integrated.inheritEnv": true,

	// Contrôle l'espacement des lettres du terminal. Il s'agit d'une valeur entière qui représente la quantité de pixels supplémentaires à ajouter entre les caractères.
	"terminal.integrated.letterSpacing": 0,

	// Contrôle la hauteur de ligne du terminal. Ce nombre est multiplié par la taille de police du terminal pour obtenir la hauteur de ligne réelle en pixels.
	"terminal.integrated.lineHeight": 1,

	// Expérimental : l'écho local est désactivé quand l'un de ces noms de programmes est trouvé dans le titre du terminal.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// Expérimental : durée du délai réseau, en millisecondes, pendant lequel les modifications locales sont répercutées sur le terminal sans attendre l'accusé de réception du serveur. Si la valeur est '0', l'écho local est toujours activé et si la valeur est '-1', il est désactivé.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// Expérimental : style du texte répercuté localement dans le terminal : style de police ou couleur RVB.
	"terminal.integrated.localEchoStyle": "dim",

	// Détermine si la sélection doit être forcée quand Option+clic est utilisé sur macOS. Cela permet de forcer une sélection normale (ligne) et d'interdire l'utilisation du mode de sélection de colonne. Cela permet de copier et de coller à l'aide de la sélection de terminal classique, par exemple, quand le mode souris est activé dans tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Détermine s'il est nécessaire de traiter la clé d'option en tant que touche Méta dans le terminal sur macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// Quand ce paramètre est défini, la couleur de premier plan de chaque cellule change pour essayer de respecter le taux de contraste spécifié. Exemples de valeurs :
	// 
	// - 1 : valeur par défaut. Ne rien faire.
	// - 4.5 : [conformité WCAG AA (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).
	// - 7 : [conformité WCAG AAA (amélioré)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
	// - 21 : blanc sur noir ou noir sur blanc.
	"terminal.integrated.minimumContrastRatio": 1,

	// Multiplicateur à utiliser sur le 'deltaY' des événements de défilement de la roulette de la souris.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// Profils Linux à présenter au moment de la création d'un terminal via la liste déroulante du terminal. Quand ils sont définis, ces profils remplacent les profils détectés par défaut. Ils sont composés de `path` et éventuellement de `args`.
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// Profils macOS à présenter au moment de la création d'un terminal via la liste déroulante du terminal. Quand ils sont définis, ces profils remplacent les profils détectés par défaut. Ils sont composés de `path` et éventuellement de `args`.
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// Profils Windows à présenter au moment de la création d'un terminal via la liste déroulante du terminal. Pour les exclure, affectez-leur une valeur null. Pour vous servir de la configuration détectée par défaut, utilisez la propriété `source`. Sinon, définissez `path` et éventuellement `args`.
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// Contrôle la façon dont le terminal réagit au clic droit.
	//  - default: Affiche le menu contextuel.
	//  - copyPaste: Effectue une copie quand il existe une sélection, sinon effectue un collage.
	//  - paste: Effectue un collage à la suite d'un clic droit.
	//  - selectWord: Sélectionne le mot sous le curseur et affiche le menu contextuel.
	"terminal.integrated.rightClickBehavior": "selectWord",

	// Contrôle la quantité maximale de lignes que le terminal conserve en mémoire tampon.
	"terminal.integrated.scrollback": 1000,

	// Dispatche la plupart des combinaisons de touches au terminal au lieu du banc d'essai, en remplaçant '#terminal.integrated.commandsToSkipShell#', qui peut être utilisé alternativement pour affiner le réglage.
	"terminal.integrated.sendKeybindingsToShell": false,

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.linux#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.linux`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur Linux. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.linux": null,

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.osx#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.osx`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur macOS. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.osx": null,

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.windows#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.windows`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur Windows. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.windows": null,

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.linux#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.linux`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal Linux. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.linux": [],

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.osx#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.osx`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal macOS. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.windows#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.windows`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal Windows. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.windows": [],

	// Détermine s'il est nécessaire d'afficher l'alerte "Le processus du terminal s'est achevé avec le code de sortie" quand le code de sortie est différent de zéro.
	"terminal.integrated.showExitAlert": true,

	// Indique s’il faut afficher les pointages pour les liens dans la sortie du terminal.
	"terminal.integrated.showLinkHover": true,

	// Contrôle le répertoire de travail dans lequel un terminal divisé démarre.
	//  - workspaceRoot: Un nouveau terminal divisé utilise la racine de l'espace de travail en tant que répertoire de travail. Dans un espace de travail multiracine, vous pouvez choisir le dossier racine à utiliser.
	//  - initial: Un nouveau terminal divisé utilise le répertoire de travail dans lequel le terminal parent a démarré.
	//  - inherited: Sur macOS et Linux, un nouveau terminal divisé utilise le répertoire de travail du terminal parent. Sur Windows, le comportement est le même qu'avec le paramètre initial.
	"terminal.integrated.splitCwd": "inherited",

	// Contrôle si les états de l’onglet terminal prennent en charge l’animation (tâches en cours d’exécution).
	"terminal.integrated.tabs.enableAnimation": true,

	// Contrôle si les onglets de terminal s’affichent en tant que liste sur le côté du terminal. Quand cette option est désactivée, une liste déroulante s’affiche à la place.
	"terminal.integrated.tabs.enabled": true,

	// Contrôle si le focus sur le terminal d’un onglet se produit par un clic ou un double-clic.
	//  - singleClick: Mettre le focus sur le terminal au clic sur l’onglet d’un terminal
	//  - doubleClick: Mettre le focus sur le terminal au double-clic sur l’onglet d’un terminal
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// Contrôle si l’affichage des onglets du terminal est masqué sous certaines conditions.
	//  - never: Ne jamais masquer l’affichage des onglets du terminal
	//  - singleTerminal: Masquer l’affichage des onglets de terminaux quand un seul terminal est ouvert
	//  - singleGroup: Masquer l’affichage des onglets de terminaux quand un seul groupe de terminaux est ouvert
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// Contrôle l’emplacement des onglets du terminal, à gauche ou à droite du ou des terminaux réels.
	//  - left: Afficher l’affichage des onglets de terminaux à gauche du terminal
	//  - right: Afficher l’affichage des onglets de terminaux à droite du terminal
	"terminal.integrated.tabs.location": "right",

	// Contrôle si les boutons de fractionnement et de suppression de terminal sont affichés en regard du nouveau bouton de terminal.
	//  - always: Toujours afficher les actions
	//  - singleTerminal: Afficher les actions lorsqu’il s’agit du seul terminal ouvert
	//  - singleTerminalOrNarrow: Afficher les actions lorsqu'il s'agit du seul terminal ouvert ou lorsque l'affichage des onglets est dans son état étroit sans texte.
	//  - never: Ne jamais afficher les actions
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// Affiche les informations sur le terminal actif dans l’affichage, ce qui est particulièrement utile lorsque le titre n’est pas visible dans les onglets.
	//  - always: Toujours afficher le terminal actif
	//  - singleTerminal: Afficher le terminal actif quand il est le seul terminal ouvert
	//  - singleTerminalOrNarrow: Afficher le terminal actif quand il est le seul terminal ouvert ou lorsque l’affichage des onglets est dans l’état d’affichage étroit et sans texte
	//  - never: Ne jamais afficher le terminal actif
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// Détermine la manière dont le titre du terminal est défini, ce qui s’affiche dans l’onglet ou l’entrée de liste déroulante du terminal.
	//  - executable: Le titre est défini par le _terminal_, le nom du processus de premier plan détecté est utilisé.
	//  - sequence: Le titre est défini par le _processus_ par le biais d’une séquence d’échappement, cela est utile si votre interpréteur de commandes définit dynamiquement le titre.
	"terminal.integrated.titleMode": "executable",

	// Contrôle la version d'Unicode à utiliser au moment de l'évaluation de la largeur des caractères dans le terminal. Si vous êtes confronté à des emojis ou d'autres caractères larges qui n'occupent pas la quantité appropriée (trop ou trop peu) d'espaces avant ou arrière, vous pouvez essayer d'adapter ce paramètre.
	//  - 6: Version 6 d'Unicode. Il s'agit d'une version antérieure qui doit fonctionner mieux sur les anciens systèmes.
	//  - 11: Version 11 d'Unicode. Cette version offre une meilleure prise en charge sur les systèmes modernes qui utilisent des versions modernes d'Unicode.
	"terminal.integrated.unicodeVersion": "11",

	// Contrôle si les distributions WSL sont affichées ou non dans la liste déroulante de terminal
	"terminal.integrated.useWslProfiles": true,

	// Indique si ConPTY doit être utilisé pour la communication des processus du terminal Windows (nécessite Windows 10 build 18309+). Winpty est utilisé si ce paramètre a la valeur false.
	"terminal.integrated.windowsEnableConpty": true,

	// Chaîne contenant tous les caractères à considérer en tant que séparateurs de mots quand le double-clic est utilisé pour sélectionner un mot.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─",

	// Contrôles si la vue Problèmes devrait révéler automatiquement les fichiers lors de leur ouverture.
	"problems.autoReveal": true,

	// Affichez les erreurs et les avertissements sur les fichiers et les dossiers.
	"problems.decorations.enabled": true,

	// Lorsqu'il est activé, le problème actuel s'affiche dans la barre d'état.
	"problems.showCurrentInStatus": false,

	// Activez/désactivez les barres de navigation.
	"breadcrumbs.enabled": true,

	// Contrôle si et comment les chemins de fichiers sont affichés dans la vue de fil d'ariane.
	//  - on: Afficher le chemin du fichier dans l’affichage de barres de navigation.
	//  - off: Ne pas afficher le chemin du fichier dans la vue de barres de navigation.
	//  - last: Afficher uniquement le dernier élément du chemin du fichier dans la vue de barres de navigation.
	"breadcrumbs.filePath": "on",

	// Restituer les fils d'Ariane avec des icônes.
	"breadcrumbs.icons": true,

	// Si activé, les barres de navigation montrent des symboles de type 'array'.
	"breadcrumbs.showArrays": true,

	// Si activé, les barres de navigation montrent des symboles de type 'boolean'.
	"breadcrumbs.showBooleans": true,

	// Si activé, les barres de navigation montrent des symboles de type 'class'.
	"breadcrumbs.showClasses": true,

	// Si activé, les barres de navigation montrent des symboles de type 'constant'.
	"breadcrumbs.showConstants": true,

	// Si activé, les barres de navigation montrent des symboles de type 'constructor'.
	"breadcrumbs.showConstructors": true,

	// Si activé, les barres de navigation montrent des symboles de type 'enumMember'.
	"breadcrumbs.showEnumMembers": true,

	// Si activé, les barres de navigation montrent des symboles de type 'enum'.
	"breadcrumbs.showEnums": true,

	// Si activé, les barres de navigation montrent des symboles de type 'event'.
	"breadcrumbs.showEvents": true,

	// Si activé, les barres de navigation montrent des symboles de type 'field'.
	"breadcrumbs.showFields": true,

	// Si activé, les barres de navigation montrent des symboles de type 'file'.
	"breadcrumbs.showFiles": true,

	// Si activé, les barres de navigation montrent des symboles de type 'function'.
	"breadcrumbs.showFunctions": true,

	// Si activé, les barres de navigation montrent des symboles de type 'interface'.
	"breadcrumbs.showInterfaces": true,

	// Si activé, les barres de navigation montrent des symboles de type 'key'.
	"breadcrumbs.showKeys": true,

	// Si activé, les barres de navigation montrent des symboles de type 'method'.
	"breadcrumbs.showMethods": true,

	// Si activé, les barres de navigation montrent des symboles de type 'module'.
	"breadcrumbs.showModules": true,

	// Si activé, les barres de navigation montrent des symboles de type 'namespace'.
	"breadcrumbs.showNamespaces": true,

	// Si activé, les barres de navigation montrent des symboles de type 'null'.
	"breadcrumbs.showNull": true,

	// Si activé, les barres de navigation montrent des symboles de type 'number'.
	"breadcrumbs.showNumbers": true,

	// Si activé, les barres de navigation montrent des symboles de type 'object'.
	"breadcrumbs.showObjects": true,

	// Si activé, les barres de navigation montrent des symboles de type 'operator'.
	"breadcrumbs.showOperators": true,

	// Si activé, les barres de navigation montrent des symboles de type 'package'.
	"breadcrumbs.showPackages": true,

	// Si activé, les barres de navigation montrent des symboles de type 'property'.
	"breadcrumbs.showProperties": true,

	// Si activé, les barres de navigation montrent des symboles de type 'string'.
	"breadcrumbs.showStrings": true,

	// Si activé, les barres de navigation montrent des symboles de type 'struct'.
	"breadcrumbs.showStructs": true,

	// Si activé, les barres de navigation montrent des symboles de type 'typeParameter'.
	"breadcrumbs.showTypeParameters": true,

	// Si activé, les barres de navigation montrent des symboles de type 'variable'.
	"breadcrumbs.showVariables": true,

	// Contrôle si et comment les symboles sont affichés dans la vue de fil d'ariane.
	//  - on: Afficher tous les symboles dans l’affichage de barres de navigation
	//  - off: Ne pas afficher de symboles dans la vue de barres de navigation.
	//  - last: Afficher uniquement le symbole actuel dans la vue de barres de navigation.
	"breadcrumbs.symbolPath": "on",

	// Détermine le mode de tri des symboles dans la vue des barres de navigation.
	//  - position: Affichez la structure des symboles par position de fichier.
	//  - name: Affichez la structure des symboles par ordre alphabétique.
	//  - type: Affichez la structure des symboles par type de symbole.
	"breadcrumbs.symbolSortOrder": "position",

	// Activez la collecte des rapports d’incident. Cela nous permet d’améliorer la stabilité. 
	// Cette option nécessite un redémarrage pour prendre effet.
	"telemetry.enableCrashReporter": true,

	// Activez la collecte des données de diagnostic. Cela nous permet de mieux comprendre comment Visual Studio Code fonctionne et où des améliorations doivent être apportées. [En savoir plus] (https://go.microsoft.com/fwlink/?LinkId=786907) sur ce que nous recueillons et notre déclaration de confidentialité.
	"telemetry.enableTelemetry": true,

	// Restituez les éléments de structure avec des icônes. 
	"outline.icons": true,

	// Utilisez des badges pour les erreurs et les avertissements.
	"outline.problems.badges": true,

	// Utilisez des couleurs pour les erreurs et les avertissements.
	"outline.problems.colors": true,

	// Affichez les erreurs et les avertissements sur les éléments de structure.
	"outline.problems.enabled": true,

	// Si activé, le plan montre des symboles de type 'array'.
	"outline.showArrays": true,

	// Si activé, le plan montre des symboles de type 'boolean'.
	"outline.showBooleans": true,

	// Si activé, le plan montre des symboles de type 'class'.
	"outline.showClasses": true,

	// Si activé, le plan montre des symboles de type 'constant'.
	"outline.showConstants": true,

	// Si activé, le plan montre des symboles de type 'constructor'.
	"outline.showConstructors": true,

	// Si activé, le plan montre des symboles de type 'enumMember'.
	"outline.showEnumMembers": true,

	// Si activé, le plan montre des symboles de type 'enum'.
	"outline.showEnums": true,

	// Si activé, le plan montre des symboles de type 'event'.
	"outline.showEvents": true,

	// Si activé, le plan montre des symboles de type 'field'.
	"outline.showFields": true,

	// Si activé, le plan montre des symboles de type 'file'.
	"outline.showFiles": true,

	// Si activé, le plan montre des symboles de type 'function'.
	"outline.showFunctions": true,

	// Si activé, le plan montre des symboles de type 'interface'.
	"outline.showInterfaces": true,

	// Si activé, le plan montre des symboles de type 'key'.
	"outline.showKeys": true,

	// Si activé, le plan montre des symboles de type 'method'.
	"outline.showMethods": true,

	// Si activé, le plan montre des symboles de type 'module'.
	"outline.showModules": true,

	// Si activé, le plan montre des symboles de type 'namespace'.
	"outline.showNamespaces": true,

	// Si activé, le plan montre des symboles de type 'null'.
	"outline.showNull": true,

	// Si activé, le plan montre des symboles de type 'number'.
	"outline.showNumbers": true,

	// Si activé, le plan montre des symboles de type 'object'.
	"outline.showObjects": true,

	// Si activé, le plan montre des symboles de type 'operator'.
	"outline.showOperators": true,

	// Si activé, le plan montre des symboles de type 'package'.
	"outline.showPackages": true,

	// Si activé, le plan montre des symboles de type 'property'.
	"outline.showProperties": true,

	// Si activé, le plan montre des symboles de type 'string'.
	"outline.showStrings": true,

	// Si activé, le plan montre des symboles de type 'struct'.
	"outline.showStructs": true,

	// Si activé, le plan montre des symboles de type 'typeParameter'.
	"outline.showTypeParameters": true,

	// Si activé, le plan montre des symboles de type 'variable'.
	"outline.showVariables": true,

	// Tableau de sources chronologiques à exclure de la vue Chronologie.
	"timeline.excludeSources": null,

	// Expérimental. Contrôle si la vue Chronologie doit charger la page suivante quand vous faites défiler une liste d'éléments jusqu'à la fin.
	"timeline.pageOnScroll": false,

	// Nombre d'éléments à montrer par défaut dans la vue Chronologie et durant le chargement d'autres éléments. L'affectation de la valeur 'null' (valeur par défaut) permet de choisir automatiquement une taille de page basée sur la zone visible de la vue Chronologie.
	"timeline.pageSize": null,

	// Configurez les paramètres à remplacer pour le langage [c].
	"[c]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configurez les paramètres à remplacer pour le langage [cpp].
	"[cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configurez les paramètres à remplacer pour le langage [css].
	"[css]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [cuda-cpp].
	"[cuda-cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configurez les paramètres à remplacer pour le langage [dockercompose].
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// Configurez les paramètres à remplacer pour le langage [dockerfile].
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configurez les paramètres à remplacer pour le langage [git-commit].
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// Configurez les paramètres à remplacer pour le langage [git-rebase].
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// Configurez les paramètres à remplacer pour le langage [go].
	"[go]":  {
		"editor.insertSpaces": false
	},

	// Configurez les paramètres à remplacer pour le langage [handlebars].
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [html].
	"[html]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [json].
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [jsonc].
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [less].
	"[less]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [Log].
	"[Log]":  {
		"editor.wordWrap": "off"
	},

	// Configurez les paramètres à remplacer pour le langage [makefile].
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configurez les paramètres à remplacer pour le langage [markdown].
	"[markdown]":  {
		"editor.wordWrap": "on",
		"editor.quickSuggestions": false
	},

	// Configurez les paramètres à remplacer pour le langage [scss].
	"[scss]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [search-result].
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// Configurez les paramètres à remplacer pour le langage [shellscript].
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// Configurez les paramètres à remplacer pour le langage [yaml].
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// Quand les extensions activées sont téléchargées localement et installées sur la machine distante.
	"remote.downloadExtensionsLocally": false,

	// Quand cette option est activée, les nouveaux processus qui s'exécutent sont détectés, et les ports qu'ils écoutent sont réacheminés automatiquement. La désactivation de ce paramètre n’empêchera pas le transfert de tous les ports. Même lorsqu’elles sont désactivées, les extensions peuvent toujours faire en sorte que les ports soient transférés, et l’ouverture de certaines URL entraîne toujours le transfert des ports.
	"remote.autoForwardPorts": true,

	// Définit la source à partir de laquelle les ports sont automatiquement réacheminés quand 'remote.autoForwardPorts' a la valeur true. Sur les machines Windows et Mac distantes, l'option 'process' n'a aucun effet, et 'output' est utilisé. Nécessite un rechargement pour prendre effet.
	//  - process: Les ports sont automatiquement réacheminés quand ils sont découverts par la surveillance des processus ayant démarré et incluant un port.
	//  - output: Les ports sont automatiquement réacheminés quand ils sont découverts via la lecture de la sortie du terminal et du débogage. Dans la mesure où tous les processus qui utilisent des ports ne s'affichent pas dans le terminal intégré ou la console de débogage, certains ports ne sont pas pris en compte. Le réacheminement des ports en fonction de la sortie n'est pas "annulé" tant que ces ports ne sont pas rechargés, ou qu'ils ne sont pas fermés par l'utilisateur dans la vue Ports.
	"remote.autoForwardPortsSource": "process",

	// Remplacez le type d'une extension. Les extensions 'ui' sont installées et exécutées sur la machine locale, alors que les extensions 'workspace' sont exécutées sur la machine distante. Quand vous remplacez le type par défaut d'une extension à l'aide de ce paramètre, vous spécifiez si cette extension doit être installée et activée localement ou à distance.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// Spécifie le nom d’hôte local à utiliser pour le réacheminement du port.
	"remote.localPortHost": "localhost",

	// Définissez les propriétés par défaut appliquées à tous les ports qui n’obtiennent pas leurs propriétés à partir du paramètre `remote.portsAttributes`. Exemple :
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// Définissez les propriétés appliquées en cas de réacheminement d’un numéro de port en particulier. Exemple :
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {},

	// Restaure les ports que vous avez réacheminés dans un espace de travail.
	"remote.restoreForwardedPorts": true,

	// Un tableau des langages pour lesquels les abréviations Emmet ne devraient pas être développées.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// Tableau de chemins d’accès, où chaque chemin peut pointer vers un fichier Emmet syntaxProfiles et/ou d’extrait de code.
	// En cas de conflit, les profils/extraits de code des chemins plus récents remplacent ceux des chemins plus anciens.
	// Consultez https://code.visualstudio.com/docs/editor/emmet pour plus d’informations et pour obtenir un exemple de fichier d’extrait.
	"emmet.extensionsPath": [],

	// Activer les abréviations Emmet dans les langages qui ne sont pas pris en charge par défaut. Ajoutez ici un mappage entre le langage en question et le langage pris en charge par Emmet.
	//  Exemple : `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// Quand la valeur est 'false', la totalité du fichier est analysé, ce qui permet de déterminer si la position actuelle est valide pour le développement des abréviations Emmet. Quand la valeur est 'true', seul le contenu autour de la position actuelle dans les fichiers CSS/SCSS/Less est analysé.
	"emmet.optimizeStylesheetParsing": true,

	// Préférences utilisées pour modifier le comportement de certaines actions et résolveurs d'Emmet.
	"emmet.preferences": {},

	// Affiche les abréviations Emmet possibles comme suggestions. Non applicable dans les feuilles de style ou quand emmet.showExpandedAbbreviation a la valeur "never".
	"emmet.showAbbreviationSuggestions": true,

	// Affiche les abréviations Emmet développées en tant que suggestions.
	// L'option "inMarkupAndStylesheetFilesOnly" s'applique aux syntaxes html, haml, jade, slim, xml, xsl, css, scss, sass, less et stylus.
	// L'option "always" s'applique à toutes les parties du fichier indépendamment de la balise/du css.
	"emmet.showExpandedAbbreviation": "always",

	// Si la valeur est 'true', les suggestions Emmet s'affichent sous forme d'extraits, ce qui vous permet de les ordonner conformément au paramètre '#editor.snippetSuggestions#'.
	"emmet.showSuggestionsAsSnippets": false,

	// Définissez le profil pour la syntaxe spécifiée ou utilisez votre propre profil avec des règles spécifiques.
	"emmet.syntaxProfiles": {},

	// Lorsqu’activé, les abréviations Emmet sont développées lorsque vous appuyez sur TAB.
	"emmet.triggerExpansionOnTab": false,

	// Variables à utiliser dans les extraits de code Emmet.
	"emmet.variables": {},

	// Contrôle si force push (avec ou sans lease) est activé.
	"git.allowForcePush": false,

	// Détermine si les commits sans exécution des crochets pre-commit et commit-msg sont autorisés.
	"git.allowNoVerifyCommit": false,

	// Toujours afficher le groupe de ressources des changements en zone de transit (Staged).
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Contrôle le flag signoff pour toutes les modifications.
	"git.alwaysSignOff": false,

	// Quand la valeur est true, les commits sont automatiquement récupérés (fetch) à partir du dépôt distant par défaut du dépôt Git actuel. Quand la valeur est 'all', les commits sont récupérés à partir de tous les dépôts distants.
	"git.autofetch": false,

	// Durée en secondes entre chaque récupération git automatique quand `git.autofetch` est activé.
	"git.autofetchPeriod": 180,

	// Détermine si l'actualisation automatique est activée.
	"git.autorefresh": true,

	// Configure le moment où les dépôts doivent être détectés automatiquement.
	//  - true: Recherchez dans les deux sous-dossiers du dossier ouvert en cours et dans les dossiers parents de fichiers ouverts.
	//  - false: Désactivez l’analyse de dépôt automatique.
	//  - subFolders: Rechercher dans les sous-dossiers du dossier actuellement ouvert.
	//  - openEditors: Rechercher dans les dossiers parents de fichiers ouverts.
	"git.autoRepositoryDetection": true,

	// Remisez (stash) les changements avant de les tirer et de les restaurer après un tirage réussi.
	"git.autoStash": false,

	// Contrôle l'ordre de tri des branches.
	"git.branchSortOrder": "committerdate",

	// Expression régulière pour valider les nouveaux noms de branche.
	"git.branchValidationRegex": "",

	// Le caractère pour remplacer les espaces dans les nouveaux noms de branche.
	"git.branchWhitespaceChar": "-",

	// Contrôle le type des références Git listées au moment de l'exécution de Extraire vers...
	//  - local: Branches locales
	//  - tags: Étiquettes
	//  - remote: Branches distantes
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Confirmez toujours la création de commits vides pour la commande 'Git: Commit Empty'.
	"git.confirmEmptyCommits": true,

	// Détermine s’il faut demander confirmation avant de forcer le push.
	"git.confirmForcePush": true,

	// Contrôle s’il faut demander une confirmation avant la validation sans vérification.
	"git.confirmNoVerifyCommit": true,

	// Confirmez avant de synchroniser des dépôts git.
	"git.confirmSync": true,

	// Contrôle le badge de compte Git.
	//  - all: Compter tous les changements.
	//  - tracked: Compter uniquement les changements suivis.
	//  - off: Désactivez le compteur.
	"git.countBadge": "all",

	// Contrôle si Git contribue aux couleurs et aux badges de l'Explorateur et de la vue Éditeurs ouverts.
	"git.decorations.enabled": true,

	// Emplacement par défaut où cloner un dépôt git.
	"git.defaultCloneDirectory": null,

	// Contrôle s’il faut détecter automatiquement les sous-modules git.
	"git.detectSubmodules": true,

	// Contrôle la limite de sous-modules git détectés.
	"git.detectSubmodulesLimit": 10,

	// Active la signature de commit avec GPG ou X.509.
	"git.enableCommitSigning": false,

	// Indique si git est activé.
	"git.enabled": true,

	// Validez toutes les modifications en l'absence de modifications en attente.
	"git.enableSmartCommit": false,

	// Contrôle si la commande Git Sync apparaît dans la barre d'état.
	"git.enableStatusBarSync": true,

	// Si activé, récupère toutes les branches au tirage. Sinon, récupère seulement la branche actuelle.
	"git.fetchOnPull": false,

	// Suit l'envoi (push) de toutes les étiquettes au moment de l'exécution de la commande de synchronisation.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// Liste des dépôts git à ignorer.
	"git.ignoredRepositories": [],

	// Ignore l'avertissement Git hérité.
	"git.ignoreLegacyWarning": false,

	// Ignore l'avertissement en cas de changements trop nombreux dans un dépôt.
	"git.ignoreLimitWarning": false,

	// Ignore l'avertissement quand Git est manquant.
	"git.ignoreMissingGitWarning": false,

	// Ignore l'avertissement quand il semble que la branche ait été rebasée au moment du tirage (pull).
	"git.ignoreRebaseWarning": false,

	// Ignore les modifications apportées aux sous-modules dans l'arborescence de fichiers.
	"git.ignoreSubmodules": false,

	// Ignore l'avertissement lorsque Git 2.25 - 2.26 est installé sur Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Contrôle quand afficher la validation de la saisie du message de commit.
	"git.inputValidation": "warn",

	// Contrôle le taille de la longueur de message de commit pour afficher un avertissement.
	"git.inputValidationLength": 72,

	// Contrôle le seuil de longueur de l'objet du message de validation pour afficher un avertissement. Annulez pour hériter la valeur de 'config.inputValidationLength'.
	"git.inputValidationSubjectLength": 50,

	// Détermine s'il est nécessaire d'ouvrir un dépôt automatiquement après le clonage.
	//  - always: Effectue toujours l'ouverture dans la fenêtre active.
	//  - alwaysNewWindow: Effectue toujours l'ouverture dans une nouvelle fenêtre.
	//  - whenNoFolderOpen: Effectue uniquement l'ouverture dans la fenêtre active quand aucun dossier n'est ouvert.
	//  - prompt: Demande toujours l'action à effectuer.
	"git.openAfterClone": "prompt",

	// Contrôle si l'éditeur de diff doit être ouvert quand l'utilisateur clique sur un changement. Sinon, l'éditeur normal est ouvert.
	"git.openDiffOnClick": true,

	// Chemin et nom de fichier de l'exécutable git. Exemple : 'C:\Program Files\Git\bin\git.exe' (Windows). Il peut s'agir également d'un tableau de valeurs de chaîne contenant plusieurs chemins de recherche.
	"git.path": null,

	// Exécute une commande git après un commit réussi.
	//  - none: N'exécutez pas de commande après une validation.
	//  - push: Exécutez 'Git Push' après une validation réussie.
	//  - sync: Exécutez 'Git Sync' après une validation réussie.
	"git.postCommitCommand": "none",

	// Contrôle si Git doit vérifier les fichiers non sauvegardés avant d'effectuer le commit.
	//  - always: Vérifiez les fichiers non enregistrés.
	//  - staged: Vérifiez uniquement les fichiers organisés non enregistrés.
	//  - never: Désactivez la vérification.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Contrôle si Git doit rechercher les fichiers non enregistrés avant de faire un stash des changements.
	//  - always: Vérifiez les fichiers non enregistrés.
	//  - staged: Vérifiez uniquement les fichiers organisés non enregistrés.
	//  - never: Désactive cette vérification.
	"git.promptToSaveFilesBeforeStash": "always",

	// Effectue un élagage au moment de la récupération.
	"git.pruneOnFetch": false,

	// Récupérez toutes les balises pendant le tirage.
	"git.pullTags": true,

	// Forcez git à utiliser rebase pendant l'exécution de la commande sync.
	"git.rebaseWhenSync": false,

	// Contrôle si une configuration utilisateur Git explicite est nécessaire ou si elle peut être devinée par Git quand elle est manquante.
	"git.requireGitUserConfig": true,

	// Liste des chemins d’accès pour rechercher des dépôts git.
	"git.scanRepositories": [],

	// Détermine si l'entrée de commit doit être affichée dans le panneau de contrôle de code source Git.
	"git.showCommitInput": true,

	// Contrôle s’il faut afficher une action Ouvrir le fichier dans l’affichage des modifications de Git.
	"git.showInlineOpenFileAction": true,

	// Contrôle si les actions git doivent afficher la progression.
	"git.showProgress": true,

	// Contrôle s’il faut afficher une notification en cas de réussite d'un envoi (push).
	"git.showPushSuccessNotification": false,

	// Contrôle les modifications organisées automatiquement par Smart Commit.
	//  - all: Organise automatiquement toutes les modifications.
	//  - tracked: Organise automatiquement les modifications suivies uniquement.
	"git.smartCommitChanges": "all",

	// Propose d'activer Smart Commit (valide toutes les modifications en l'absence de modifications organisées).
	"git.suggestSmartCommit": true,

	// Contrôle si une notification apparaît lors de l'exécution de l'action Sync, qui permet à l'utilisateur d'annuler l'opération.
	"git.supportCancellation": false,

	// Détermine si VS Code doit être activé en tant que gestionnaire d'authentification pour les processus git générés dans le terminal intégré. Remarque : Les terminaux doivent redémarrer pour permettre la prise en compte des changements apportés à ce paramètre.
	"git.terminalAuthentication": true,

	// Contrôle la date à utiliser pour les éléments de la vue Chronologie.
	//  - committed: Utiliser la date de commit
	//  - authored: Utiliser la date de création
	"git.timeline.date": "committed",

	// Contrôle si l'auteur du commit doit être affiché dans la vue Chronologie.
	"git.timeline.showAuthor": true,

	// Contrôle le comportement des changements non suivis.
	//  - mixed: Tous les changements, suivis et non suivis, apparaissent ensemble et se comportent de la même manière.
	//  - separate: Les changements non suivis apparaissent séparément dans la vue Contrôle de code source. Ils sont également exclus de plusieurs actions.
	//  - hidden: Les changements non suivis sont masqués et exclus de plusieurs actions.
	"git.untrackedChanges": "mixed",

	// Détermine s'il est nécessaire d'utiliser le message de la zone d'entrée de commit en tant que message de stash par défaut.
	"git.useCommitInputAsStashMessage": false,

	// Contrôles si force push utilise la variante force-with-lease plus sûr.
	"git.useForcePushWithLease": true,

	// Détermine si l'authentification GitHub automatique doit être activée pour les commandes Git dans VS Code.
	"github.gitAuthentication": true,

	// URI of your GitHub Enterprise Instance
	"github-enterprise.uri": "",

	// Contrôle l’activation de la détection des tâches Grunt. La détection des tâches Grunt peut entraîner l’exécution de fichiers dans un espace de travail ouvert.
	"grunt.autoDetect": "off",

	// Contrôle l’activation de la détection des tâches Gulp. La détection des tâches Gulp peut entraîner l’exécution de fichiers dans un espace de travail ouvert.
	"gulp.autoDetect": "off",

	// Contrôle l’activation de la détection des tâches Jake. La détection des tâches Jake peut entraîner l’exécution de fichiers dans un espace de travail ouvert.
	"jake.autoDetect": "off",

	// Activer/désactiver le rendu des maths dans la préversion intégrée de la Démarque.
	"markdown.math.enabled": true,

	// Détermine s'il faut automatiquement passer au conflit de fusion suivant après la résolution d'un conflit de fusion.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Créer un CodeLens pour les blocs de conflit de fusion dans l’éditeur.
	"merge-conflict.codeLens.enabled": true,

	// Créer des décorateurs pour les blocs de conflit de fusion dans l’éditeur.
	"merge-conflict.decorators.enabled": true,

	// Contrôle si la vue Diff doit être ouverte pendant la comparaison des changements dans les conflits de fusion.
	//  - Current: Ouvrez la vue Diff dans le groupe d'éditeurs actuel.
	//  - Beside: Ouvrez la vue Diff à côté du groupe d'éditeurs actuel.
	//  - Below: Ouvrez la vue Diff sous le groupe d'éditeurs actuel.
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it.
	"debug.javascript.autoExpandGetters": false,

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error. Note: your launch.json `type` must be prefixed with `pwa-` to use this, such as `pwa-node`.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Whether to suggest pretty printing JavaScript code that looks minified when you step into it.
	"debug.javascript.suggestPrettyPrinting": true,

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Use the new in-preview JavaScript debugger for Node.js and Chrome.
	"debug.javascript.usePreview": true,

	// Contrôle s'il faut afficher un avertissement quand l'attribut 'useWSL' est utilisé.
	"debug.node.showUseWslIsDeprecatedWarning": true,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Contrôle si les scripts npm doivent être détectés automatiquement.
	"npm.autoDetect": "on",

	// Activez l'exécution de scripts NPM contenus dans un dossier du menu contextuel Explorer.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Activez une vue explorateur pour les scripts npm en l'absence d'un fichier 'package.json' de haut niveau.
	"npm.enableScriptExplorer": false,

	// Configurer les profils glob pour les dossiers qui doivent être exclus de la détection de script automatique.
	"npm.exclude": "",

	// Récupérez des données à partir de https://registry.npmjs.org et https://registry.bower.io pour l'auto-complétion et obtenir des informations concernant les fonctionnalités de pointage sur les dépendances npm.
	"npm.fetchOnlinePackageInfo": true,

	// Gestionnaire de package utilisé pour exécuter des scripts.
	//  - auto: Détectez automatiquement le gestionnaire de package à utiliser pour l'exécution des scripts en fonction des fichiers de verrouillage et des gestionnaires de packages installés.
	//  - npm: Utilisez npm en tant que gestionnaire de package pour l'exécution des scripts.
	//  - yarn: Utilisez YARN en tant que gestionnaire de package pour l'exécution des scripts.
	//  - pnpm: Utilisez pnpm en tant que gestionnaire de package pour l'exécution des scripts.
	"npm.packageManager": "auto",

	// Exécutez les commandes npm avec l'option `--silent`.
	"npm.runSilent": false,

	// Action de clic par défaut utilisée dans l'explorateur de scripts npm : 'open' ou 'run'. La valeur par défaut est 'open'.
	"npm.scriptExplorerAction": "open",

	// Activez/désactivez l'indicateur flottant qui s'affiche quand il a le focus dans le navigateur simple.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// Email address to use in 42 headers
	"42header.email": "",

	// Username to use in 42 headers
	"42header.username": "",

	// Specifies norminette command
	"codam-norminette-3.command": "norminette",

	// List of norminette errors to not highlight, e.g.: WRONG_SCOPE_COMMENT
	"codam-norminette-3.ignoreErrors": [],

	// Specifies which files to run norminette on 
	//  defaults to \.[ch]$
	"codam-norminette-3.regex": "\\.[ch]$",

	// Ajoute des chemins include à partir de nan et node-addon-api quand il s'agit de dépendances.
	"C_Cpp.addNodeAddonIncludePaths": false,

	// Contrôle si les fichiers sont automatiquement ajoutés à files.associations quand ils sont la cible d'une opération de navigation à partir d'un fichier C/C++.
	"C_Cpp.autoAddFileAssociations": true,

	// Contrôle le fournisseur de complétion automatique. "Default" permet d'utiliser le moteur IntelliSense actif. "Disabled" permet d'utiliser la complétion basée sur les mots, fournie par Visual Studio Code.
	"C_Cpp.autocomplete": "Default",

	// Si la valeur est true, l'autocomplétion ajoute automatiquement "(" après les appels de fonction. Dans ce cas ")" peut également être ajouté, en fonction de la valeur du paramètre "editor.autoClosingBrackets".
	"C_Cpp.autocompleteAddParentheses": false,

	// Nom du style prédéfini utilisé en tant que solution de secours au cas où clang-format serait appelé avec le style "file". Toutefois, le fichier .clang-format est introuvable. Les choix possibles sont Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit ou aucune valeur. Vous pouvez également utiliser {clé: valeur, ...} pour définir des paramètres spécifiques. Par exemple, le style "Visual Studio" est semblable à ceci : { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// Chemin complet de l'exécutable clang-format. Si rien n'est spécifié, et si clang-format est disponible dans la variable d'environnement PATH, la valeur de cette dernière est utilisée. En l'absence de valeur dans la variable d'environnement PATH, une copie de clang-format groupée en bundle avec l'extension est utilisée.
	"C_Cpp.clang_format_path": "",

	// Si cette option est définie, elle remplace le comportement de tri des inclusions déterminé par le paramètre SortIncludes.
	"C_Cpp.clang_format_sortIncludes": null,

	// Style de programmation. Prend en charge Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Utilisez "file" pour charger le style à partir d'un fichier .clang-format dans le répertoire actif ou parent. Utilisez {clé: valeur, ...} pour définir des paramètres spécifiques. Par exemple, le style "Visual Studio" est semblable à ceci : { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }
	"C_Cpp.clang_format_style": "file",

	// Si cette fonctionnalité est activée, les plages de pliage de code sont fournies par le serveur de langage.
	"C_Cpp.codeFolding": "Enabled",

	// Définit le comportement de l'éditeur quand vous appuyez sur la touche Entrée dans un bloc de commentaires multiligne ou monoligne.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// Détermine si des notifications de fenêtre contextuelle s'affichent quand une extension de fournisseur de configuration ne peut pas fournir la configuration d'un fichier source.
	"C_Cpp.configurationWarnings": "Enabled",

	// Si la valeur est true, le remplacement de la commande d'interpréteur de commandes du débogueur utilise un accent grave (`) obsolète.
	"C_Cpp.debugger.useBacktickCommandSubstitution": false,

	// Valeur à utiliser dans une configuration si "browse.databaseFilename" n'est pas spécifié ou a la valeur "${default}".
	"C_Cpp.default.browse.databaseFilename": "",

	// Valeur à utiliser dans une configuration si "browse.limitSymbolsToIncludedHeaders" n'est pas spécifié ou a la valeur "${default}".
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// Valeur à utiliser dans une configuration si "browse.path" n'est pas spécifié ou valeurs à insérer si "${default}" est présent dans "browse.path".
	"C_Cpp.default.browse.path": null,

	// Valeur à utiliser dans une configuration si "compileCommands" n'est pas spécifié ou est défini sur "${default}".
	"C_Cpp.default.compileCommands": "",

	// Valeur à utiliser dans une configuration si "compilerArgs" n'est pas spécifié ou est défini sur "${default}".
	"C_Cpp.default.compilerArgs": null,

	// Valeur à utiliser dans une configuration si "compilerPath" n'est pas spécifié ou est défini sur "${default}".
	"C_Cpp.default.compilerPath": null,

	// Valeur à utiliser dans une configuration si "configurationProvider" n'est pas spécifié ou est défini sur "${default}".
	"C_Cpp.default.configurationProvider": "",

	// Valeur à utiliser dans une configuration si "cppStandard" n'est pas spécifié ou est défini sur "${default}".
	"C_Cpp.default.cppStandard": "",

	// Valeur à utiliser dans une configuration si "cStandard" n'est pas spécifié ou est défini sur "${default}".
	"C_Cpp.default.cStandard": "",

	// Valeur à utiliser dans une configuration si "customConfigurationVariables" n'est pas défini, ou valeurs à insérer si "${default}" est présent dans "customConfigurationVariables".
	"C_Cpp.default.customConfigurationVariables": null,

	// Valeur à utiliser dans une configuration si "defines" n'est pas spécifié ou valeurs à insérer si "${default}" est présent dans "defines".
	"C_Cpp.default.defines": null,

	// Contrôle si l'extension signale les erreurs détectées dans c_cpp_properties.json.
	"C_Cpp.default.enableConfigurationSquiggles": true,

	// Valeur à utiliser dans une configuration si "forcedInclude" n'est pas spécifié ou valeurs à insérer si "${default}" est présent dans "forcedInclude".
	"C_Cpp.default.forcedInclude": null,

	// Valeur à utiliser dans une configuration si "includePath" n'est pas spécifié dans c_cpp_properties.json. Si "includePath" est spécifié, ajoutez "${default}" au tableau pour insérer les valeurs de ce paramètre.
	"C_Cpp.default.includePath": null,

	// Valeur à utiliser dans une configuration si "intelliSenseMode" n'est pas spécifié ou est défini sur "${default}".
	"C_Cpp.default.intelliSenseMode": "",

	// Valeur à utiliser dans une configuration si "macFrameworkPath" n'est pas spécifié ou valeurs à insérer si "${default}" est présent dans "macFrameworkPath".
	"C_Cpp.default.macFrameworkPath": null,

	// Valeur à utiliser pour le chemin d'inclusion système. Si cette option est définie, elle remplace le chemin d'inclusion système obtenu via les paramètres "compilerPath" et "compileCommands".
	"C_Cpp.default.systemIncludePath": null,

	// Version du chemin d'inclusion du SDK Windows à utiliser sur Windows, par ex., '10.0.17134.0'.
	"C_Cpp.default.windowsSdkVersion": "",

	// Contrôle si les blocs de préprocesseur inactifs ont une couleur différente de celle du code actif. Ce paramètre n'a pas d'effet si IntelliSense est désactivé ou utilise le thème Contraste élevé par défaut.
	"C_Cpp.dimInactiveRegions": true,

	// Si cette option est activée, le code prend une couleur qui dépend d'IntelliSense. Ce paramètre s'applique uniquement si intelliSenseEngine a la valeur "Default".
	"C_Cpp.enhancedColorization": "Enabled",

	// Contrôle si les erreurs de compilation suspectées détectées par le moteur IntelliSense sont signalées à l'éditeur. Ce paramètre est ignoré par le moteur de l'analyseur de balises.
	"C_Cpp.errorSquiggles": "EnabledIfIncludesResolve",

	// Indique à l'extension quand utiliser le paramètre "files.exclude" pendant la détermination des fichiers à ajouter à la base de données de navigation du code quand vous parcourez les chemins du tableau "browse.path". "checkFolders" signifie que les filtres d'exclusion sont évalués une seule fois par dossier (les fichiers individuels ne sont pas vérifiés). "checkFilesAndFolders" signifie que les filtres d'exclusion sont évalués sur chaque fichier et dossier rencontrés. Si votre paramètre "files.exclude" contient uniquement des dossiers, "checkFolders" est le meilleur choix, car il augmente la vitesse à laquelle l'extension peut initialiser la base de données de navigation du code.
	"C_Cpp.exclusionPolicy": "checkFolders",

	// Contrôle si les fonctionnalités "expérimentales" sont utilisables.
	"C_Cpp.experimentalFeatures": "Disabled",

	// Configurez des modèles Glob pour l’exclusion des dossiers (et des fichiers si « C_Cpp.exclusionPolicy » est modifié). Ceux-ci sont spécifiques à l’extension C/C++ et s’ajoutent à « files.exclude », mais contrairement à « files.exclude », ils ne sont pas supprimés de l’affichage de l’Explorateur. Vous pourrez en savoir plus sur les modèles Glob [ici](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.files.exclude": {
		"**/.vscode": true
	},

	// Configure le moteur de mise en forme
	//  - clangFormat: clang-format est utilisé pour la mise en forme du code.
	//  - vcFormat: Le moteur de mise en forme de Visual C++ est utilisé pour la mise en forme du code.
	//  - Default: Par défaut, clang-format sera utilisé pour formater le code. Cependant, le moteur de formatage Visual C++ sera utilisé si un fichier .editorconfig avec des paramètres pertinents est trouvé plus près du code à formater et si clang_format_style a la valeur par défaut : 'file'.
	//  - Disabled: La mise en forme du code va être désactivée.
	"C_Cpp.formatting": "Default",

	// Contrôle la coloration d'arrière-plan des blocs de préprocesseur inactifs. L'entrée se présente sous la forme d'un code de couleur hexadécimal ou d'une couleur de thème valide. Si ce paramètre n'est pas défini, la valeur par défaut est Transparent. Ce paramètre s'applique uniquement quand l'estompage des régions inactives est activé.
	"C_Cpp.inactiveRegionBackgroundColor": "",

	// Contrôle la coloration de la police des blocs de préprocesseur inactifs. L'entrée se présente sous la forme d'un code de couleur hexadécimal ou d'une couleur de thème valide. Si ce paramètre n'est pas défini, la valeur par défaut est le schéma de coloration de syntaxe de l'éditeur. Ce paramètre s'applique uniquement quand l'estompage des régions inactives est activé.
	"C_Cpp.inactiveRegionForegroundColor": "",

	// Contrôle l'opacité des blocs de préprocesseur inactifs. Varie entre 0,1 et 1,0. Ce paramètre s'applique uniquement quand l'estompage des régions inactives est activé.
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// Définit le chemin de dossier des en-têtes précompilés mis en cache utilisés par IntelliSense. Le chemin du cache par défaut est "%LocalAppData%/Microsoft/vscode-cpptools" sur Windows, "$XDG_CACHE_HOME/vscode-cpptools/" sur Linux (ou "$HOME/.cache/vscode-cpptools/" si XDG_CACHE_HOME n'est pas défini) et "$HOME/Library/Caches/vscode-cpptools/" sur Mac. Le chemin par défaut est utilisé si aucun chemin n'est spécifié ou si le chemin spécifié n'est pas valide.
	"C_Cpp.intelliSenseCachePath": "",

	// Taille maximale de l'espace du disque dur par espace de travail en Mo (mégaoctets) pour les en-têtes précompilés mis en cache. L'utilisation réelle peut varier autour de cette valeur. La taille par défaut est de 5 120 Mo. La mise en cache des en-têtes précompilés est désactivée quand la taille est égale à 0.
	"C_Cpp.intelliSenseCacheSize": 5120,

	// Contrôle le fournisseur IntelliSense. "Tag Parser" fournit des résultats "approximatifs" indépendants du contexte. "Default" fournit des résultats contextuels. "Disabled" désactive les fonctionnalités du service de langage C/C++.
	"C_Cpp.intelliSenseEngine": "Default",

	// Contrôle si le moteur IntelliSense bascule automatiquement vers l'analyseur de balises pour les unités de traduction qui contiennent des erreurs #include.
	"C_Cpp.intelliSenseEngineFallback": "Disabled",

	// Limite d'utilisation de la mémoire en Mo (mégaoctets) d'un processus IntelliSense. La limite par défaut est de 4 096 Mo, et la limite maximale est de 16 Go. L'extension s'arrête et redémarre un processus IntelliSense quand elle dépasse la limite.
	"C_Cpp.intelliSenseMemoryLimit": 4096,

	// Contrôle le délai en millisecondes avant que la mise à jour d'IntelliSense ne commence après une modification.
	"C_Cpp.intelliSenseUpdateDelay": 2000,

	// Verbosité de la journalisation dans le panneau Sortie. L'ordre des niveaux du moins détaillé au plus détaillé est : None < Error < Warning < Information < Debug.
	"C_Cpp.loggingLevel": "Error",

	// Caractère utilisé comme séparateur de chemin dans les résultats d'autocomplétion de #include.
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// Si la valeur est true, l'opération Renommer le symbole nécessite un identificateur C/C++ valide.
	"C_Cpp.renameRequiresIdentifier": true,

	// Si la valeur est true, les info-bulles de pointage et d'autocomplétion affichent uniquement certaines étiquettes de commentaires structurés. Sinon, tous les commentaires sont affichés.
	"C_Cpp.simplifyStructuredComments": true,

	// Si la valeur est true, des extraits de code sont fournis par le serveur de langage.
	"C_Cpp.suggestSnippets": true,

	// Définissez "Insiders" pour télécharger et installer automatiquement les dernières builds Insiders de l'extension, qui comprend les fonctionnalités à venir et des résolutions de bogues.
	"C_Cpp.updateChannel": "Default",

	// Les spécificateurs d'accès sont mis en retrait par rapport aux définitions de classe ou de struct en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations
	"C_Cpp.vcFormat.indent.accessSpecifiers": false,

	// Les accolades sont mises en retrait en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations.
	"C_Cpp.vcFormat.indent.braces": false,

	// Le code situé à l'intérieur d'un bloc case est mis en retrait par rapport à son étiquette, en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations
	"C_Cpp.vcFormat.indent.caseContents": true,

	// Mettre en retrait les accolades qui suivent une instruction case en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations
	"C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,

	// Les étiquettes sont mises en retrait par rapport aux instructions switch en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations.
	"C_Cpp.vcFormat.indent.caseLabels": false,

	// Position des étiquettes goto
	//  - oneLeft: Placez les étiquettes goto à gauche de la mise en retrait du code actuel, en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations
	//  - leftmostColumn: Placez les étiquettes goto sur le bord le plus à gauche du code.
	//  - none: Les étiquettes goto ne sont pas mises en forme.
	"C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",

	// Mettre en retrait les accolades des expressions lambda utilisées en tant que paramètres de fonction par rapport au début de l'instruction en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations
	"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,

	// Détermine par rapport à quoi la nouvelle ligne est mise en retrait
	//  - outermostParenthesis: Mettez en retrait une nouvelle ligne par rapport à la parenthèse ouvrante la plus extérieure.
	//  - innermostParenthesis: Mettez en retrait une nouvelle ligne par rapport à la parenthèse ouvrante la plus intérieure.
	//  - statementBegin: Mettez en retrait une nouvelle ligne par rapport au début de l'instruction actuelle.
	"C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",

	// Le code est mis en retrait par rapport à son espace de noms englobant, en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations
	"C_Cpp.vcFormat.indent.namespaceContents": true,

	// Position des directives de préprocesseur
	//  - oneLeft: Les directives de préprocesseur sont placées à gauche de la mise en retrait du code actuel, en fonction de la valeur spécifiée dans le paramètre Éditeur : Taille des tabulations
	//  - leftmostColumn: Les directives de préprocesseur sont placées sur le bord le plus à gauche du code.
	//  - none: Les directives de préprocesseur ne sont pas mises en forme.
	"C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",

	// La mise en retrait des commentaires ne change pas pendant les opérations de mise en forme.
	"C_Cpp.vcFormat.indent.preserveComments": false,

	// Dans le code existant, conservez l'alignement existant de la mise en retrait des nouvelles lignes entre parenthèses.
	"C_Cpp.vcFormat.indent.preserveWithinParentheses": false,

	// Quand vous tapez une nouvelle ligne, elle est alignée sous la parenthèse ouvrante, ou elle est basée sur "C_Cpp.vcFormat.indent.multiLineRelativeTo".
	//  - alignToParenthesis: La nouvelle ligne est alignée sous la parenthèse ouvrante.
	//  - indent: La nouvelle ligne est mise en retrait en fonction de "C_Cpp.vcFormat.indent.multiLineRelativeTo".
	"C_Cpp.vcFormat.indent.withinParentheses": "indent",

	// Placez 'catch' et les mots clés similaires sur une nouvelle ligne.
	"C_Cpp.vcFormat.newLine.beforeCatch": true,

	// Placez 'else 'sur une nouvelle ligne.
	"C_Cpp.vcFormat.newLine.beforeElse": true,

	// Position des accolades ouvrantes pour les blocs de contrôle
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",

	// Position des accolades ouvrantes pour les fonctions
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",

	// Position des accolades ouvrantes pour les fonctions lambda
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",

	// Position des accolades ouvrantes pour les espaces de noms
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",

	// Position des accolades ouvrantes pour les définitions de type
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",

	// Placez 'while' dans une boucle do-while sur une nouvelle ligne.
	"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,

	// Pour les corps de fonction vides, déplacez les accolades fermantes sur la même ligne que les accolades ouvrantes.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,

	// Pour les types vides, déplacez les accolades fermantes sur la même ligne que les accolades ouvrantes.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,

	// Placez les accolades ouvrantes et fermantes pour les étendues sur des lignes distinctes.
	"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,

	// Un espace est ajouté après la parenthèse fermante d'un cast de style C.
	"C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,

	// Un espace est ajouté après chaque virgule.
	"C_Cpp.vcFormat.space.afterComma": true,

	// Un espace est ajouté entre le mot clé et la parenthèse ouvrante dans les instructions de flux de contrôle.
	"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,

	// Espaces autour des opérateurs d'assignation
	//  - insert: Un espace est ajouté avant et après l'opérateur.
	//  - remove: Les espaces avant et après l'opérateur sont supprimés.
	//  - ignore: Les espaces sont laissés tels qu'ils ont été entrés.
	"C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",

	// Espaces autour des opérateurs binaires
	//  - insert: Un espace est ajouté avant et après l'opérateur.
	//  - remove: Les espaces avant et après l'opérateur sont supprimés.
	//  - ignore: Les espaces sont laissés tels qu'ils ont été entrés.
	"C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",

	// Espaces autour des opérateurs conditionnels
	//  - insert: Un espace est ajouté avant et après l'opérateur.
	//  - remove: Les espaces avant et après l'opérateur sont supprimés.
	//  - ignore: Les espaces sont laissés tels qu'ils ont été entrés.
	"C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",

	// Un espace est ajouté avant les accolades ouvrantes des blocs d'étendue.
	"C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,

	// Un espace est ajouté avant chaque virgule.
	"C_Cpp.vcFormat.space.beforeComma": false,

	// Un espace est ajouté avant le signe deux points dans les définitions de constructeur.
	"C_Cpp.vcFormat.space.beforeConstructorColon": true,

	// Lorsque les crochets sont vides, un espace est ajouté avant le crochet ouvrant.
	"C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,

	// Espacement entre les noms de fonction et les parenthèses ouvrantes des listes d'arguments
	//  - insert: Ajoutez un espace avant la parenthèse ouvrante d'une fonction.
	//  - remove: Les espaces avant les parenthèses ouvrantes d'une fonction sont supprimés.
	//  - ignore: Les espaces sont laissés tels qu'ils ont été entrés.
	"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",

	// Un espace est ajouté avant le signe deux points pour les types hérités dans les définitions de classe.
	"C_Cpp.vcFormat.space.beforeInheritanceColon": true,

	// Un espace est ajouté avant l'accolade ouvrante de l'initialisation uniforme et des listes d'initialiseurs.
	"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,

	// Un espace est ajouté avant la parenthèse ouvrante des listes d'arguments d'expressions lambda.
	"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,

	// Un espace est ajouté avant les crochets ouvrants.
	"C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,

	// Quand les accolades sont vides et situées sur la même ligne, un espace est inséré entre elles.
	"C_Cpp.vcFormat.space.betweenEmptyBraces": false,

	// Lorsque les crochets sont vides, un espace est inséré entre eux.
	"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,

	// Quand une liste de paramètres de fonction est vide, un espace est inséré entre ses parenthèses.
	"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,

	// Lorsque les crochets sont vides, un espace est inséré entre eux.
	"C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,

	// Pour les tableaux multidimensionnels, tout espace entre les crochets est supprimé. Les autres paramètres qui contrôlent l'espace sont remplacés.
	"C_Cpp.vcFormat.space.groupSquareBrackets": true,

	// Un espace est inséré après chaque point-virgule.
	"C_Cpp.vcFormat.space.insertAfterSemicolon": false,

	// Espaces autour des opérateurs de pointeur et de référence
	//  - left: Les opérateurs de pointeur et de référence sont alignés à gauche.
	//  - center: Ls opérateurs de pointeur et de référence sont centrés.
	//  - right: Les opérateurs de pointeur et de référence sont alignés à droite.
	//  - ignore: Les opérateurs de pointeur et de référence ne sont pas mis en forme.
	"C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",

	// Les espaces autour des virgules sont conservés dans l'initialisation uniforme et les listes d'initialiseurs.
	"C_Cpp.vcFormat.space.preserveInInitializerList": true,

	// Les espaces autour des opérateurs d'accès aux membres, des opérateurs de pointeur vers membre et des opérateurs de résolution d'étendue sont supprimés.
	"C_Cpp.vcFormat.space.removeAroundMemberOperators": true,

	// Les espaces entre les opérateurs unaires et les opérandes sont supprimés.
	"C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,

	// Les espaces sont supprimés avant tous les points-virgules.
	"C_Cpp.vcFormat.space.removeBeforeSemicolon": true,

	// Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante d'un cast de style C.
	"C_Cpp.vcFormat.space.withinCastParentheses": false,

	// Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante dans les instructions de flux de contrôle.
	"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,

	// Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante d'une expression entre parenthèses.
	"C_Cpp.vcFormat.space.withinExpressionParentheses": false,

	// Un espace est ajouté après l'accolade ouvrante et avant l'accolade fermante de l'initialisation uniforme et des listes d'initialiseurs.
	"C_Cpp.vcFormat.space.withinInitializerListBraces": true,

	// Un espace est ajouté après le crochet ouvrant et avant le crochet fermant.
	"C_Cpp.vcFormat.space.withinLambdaBrackets": false,

	// Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante dans les listes de paramètres de fonction.
	"C_Cpp.vcFormat.space.withinParameterListParentheses": false,

	// Un espace est ajouté après le crochet ouvrant et avant le crochet fermant.
	"C_Cpp.vcFormat.space.withinSquareBrackets": false,

	// Options d'enveloppement pour les blocs
	//  - oneLiners: Un bloc de code complet entré sur une seule ligne est conservé sur cette même ligne, quelles que soient les valeurs des paramètres Format VC : Nouvelle ligne
	//  - allOneLineScopes: Tout code dans lequel l'accolade ouvrante et l'accolade fermante sont entrées sur une seule ligne est conservé sur cette même ligne, quelles que soient les valeurs des paramètres Format VC : Nouvelle ligne
	//  - never: Les blocs de code sont toujours mis en forme en fonction des valeurs des paramètres Format VC : Nouvelle ligne
	"C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",

	// Activez les services d'intégration pour le [gestionnaire de dépendances vcpkg](https://aka.ms/vcpkg/).
	"C_Cpp.vcpkg.enabled": true,

	// Contrôle si l'analyse des fichiers d'espace de travail non actifs utilise les périodes de veille pour éviter d'utiliser 100 % du processeur. Les valeurs les plus élevées/hautes/moyennes/basses correspondent approximativement à 100/75/50/25 % de l'utilisation du processeur.
	"C_Cpp.workspaceParsingPriority": "highest",

	// Symboles à inclure dans les résultats de la requête quand Atteindre le symbole dans l'espace de travail est appelé.
	"C_Cpp.workspaceSymbols": "Just My Code",

}
